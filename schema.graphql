enum InstrumentType {
  GENERAL
  CREDITLINE
  OPTIONS
  POOL
}

type Market @entity {
  # marketId
  id: ID!
  vault: Vault!
  # bondPool
  bondPool: BondPool!
  creationTimestamp: BigInt!
  resolutionTimestamp: BigInt!

  # market phase => should find way to do better than this
  duringAssessment: Boolean!
  onlyReputable: Boolean!
  resolved: Boolean!
  alive: Boolean!
  baseBudget: BigDecimal!
  marketCondition: Boolean!

  # resolve parameters
  prematureResolve: Boolean
  extraGain: BigDecimal
  principalLoss: BigDecimal
  atLoss: Boolean

  # market parameters
  N: BigInt!
  sigma: BigDecimal!
  alpha: BigDecimal!
  omega: BigDecimal!
  delta: BigDecimal!
  r: BigDecimal!
  s: BigDecimal!
  steak: BigDecimal!
  

  # redemption price set when market is resolved, may be null.
  redemptionPrice: BigDecimal!
  # loggedCollateral
  totalCollateral: BigDecimal!

  # keeps track of all the managers during assessment
  managers: [ManagerMarketPair!] @derivedFrom(field: "market")

  approvedPrincipal: BigDecimal
  approvedYield: BigDecimal

  # instrument type
  instrumentType: InstrumentType!

  # non-null based on instrument type
  creditlineInstrument: CreditlineInstrument
  poolInstrument: PoolInstrument
  generalInstrument: GeneralInstrument

  # validatorData in controller
  # addresses of who has been chosen to be validator
  validators: [Validator!]! @derivedFrom(field: "market")
  valCap: BigDecimal!
  initialStake: BigDecimal!
  finalStake: BigDecimal!
  validatorAveragePrice: BigDecimal!
  validatorNumResolved: BigInt!
  validatorNumApproved: BigInt!
  validatorTotalZCB: BigInt!
  validatorTotalStaked: BigInt!
}

type Validator @entity {
  # concat of val address and market.id
  id: ID!
  market: Market!
  approved: Boolean!
  resolved: Boolean!
}

interface BaseInstrument {
  # instrument address
  id: ID!
  name: String!
  market: Market!
  vault: Vault!
  # address of the utilizer
  utilizer: String!
  # maybe a better way to do this?
  underlyingBalance: BigDecimal!
  seniorAPR: BigDecimal! 
  exposurePercentage: BigDecimal!
  managerStake: BigDecimal! 
  approvalPrice: BigDecimal!
  principal: BigDecimal!
  expectedYield: BigDecimal!
  duration: BigInt!
  description: String!
}

type GeneralInstrument implements BaseInstrument @entity {
  id: ID!
  name: String!
  market: Market!
  vault: Vault!
  # address of the utilizer
  utilizer: String!
  # maybe a better way to do this?
  underlyingBalance: BigDecimal! 
  seniorAPR: BigDecimal! 
  exposurePercentage: BigDecimal!
  managerStake: BigDecimal! 
  approvalPrice: BigDecimal!
  
  principal: BigDecimal!
  expectedYield: BigDecimal!
  duration: BigInt!
  description: String!
  maturityDate: BigInt
}

type VaultFactory @entity {
  id: ID!
  vaultCount: BigInt!
}

type Vault @entity {
  # vault address
  id: ID!
  vaultId: BigInt!
  
  # ERC4626
  name: String!
  symbol: String!
  decimals: BigInt!
  underlying: Token!
  # total balance of underlying
  totalAssets: BigDecimal!
  # total number of shares
  totalSupply: BigDecimal!
  # total number of instrument holdings
  totalInstrumentHoldings: BigDecimal!
  
  
  onlyVerified: Boolean!
  rVault: BigDecimal!
  assetLimit: BigDecimal! 
  totalAssetLimit: BigDecimal!
  N: BigInt!
  sigma: BigDecimal!
  alpha: BigDecimal!
  omega: BigDecimal!
  delta: BigDecimal!
  rMarket: BigDecimal!
  s: BigDecimal!
  steak: BigDecimal!
  instrumentCount: BigInt!
  creditlineInstruments: [CreditlineInstrument!]! @derivedFrom (field: "vault")
  generalInstruments: [GeneralInstrument!]! @derivedFrom (field: "vault")
  poolInstruments: [PoolInstrument!]! @derivedFrom (field: "vault")
  markets: [Market!]! @derivedFrom(field: "vault")
  marketIds: [String!]!

  # optional for now?
  utilizationRate: BigDecimal
  totalEstimatedAPR: BigDecimal
  goalAPR: BigDecimal
  totalProtection: BigDecimal
  exchangeRate: BigDecimal!
}

type PoolInstrument implements BaseInstrument @entity {
  # Base Instrument fields
  # instrument address
  id: ID!
  market: Market!
  vault: Vault!
  # address of the utilizer
  utilizer: String!
  underlyingBalance: BigDecimal!
  name: String!
  seniorAPR: BigDecimal! 
  exposurePercentage: BigDecimal!
  managerStake: BigDecimal! 
  approvalPrice: BigDecimal!
  principal: BigDecimal!
  expectedYield: BigDecimal!
  duration: BigInt!
  description: String!

  collaterals: [PoolCollateral!]! @derivedFrom(field: "pool")
  totalBorrowShares: BigDecimal!
  totalBorrowAssets: BigDecimal!
  totalSupplyShares: BigDecimal!
  totalSupplyAssets: BigDecimal!
  totalAvailableAssets: BigDecimal! 

  saleAmount: BigDecimal!
  initPrice: BigDecimal!
  promisedReturn: BigDecimal!
  inceptionTime: BigInt!
  inceptionPrice: BigDecimal!
  leverageFactor: BigDecimal!
  managementFee: BigDecimal!

  # borrow apr info, get on event add Interest => ratePerSec to APR
  borrowAPR: BigDecimal
}

type PoolCollateral @entity {
  # concatenation of pool.id and tokenAddress  - token.id
  id: ID!
  pool: PoolInstrument!
  name: String!
  symbol: String!
  tokenId: BigInt!
  tokenAddress: String!
  borrowAmount: BigDecimal!
  maxAmount: BigDecimal!
  isERC20: Boolean!
  # ERC20
  totalSupplied: BigDecimal!
  decimals: BigInt

  # ERC721, address of owner if there collateralized, zero address if no one.
  owner: String!
}

type CreditlineInstrument implements BaseInstrument @entity {
  # Base Instrument fields
  # instrument address
  id: ID!
  market: Market!
  vault: Vault!
  # address of the utilizer
  utilizer: String!
  underlyingBalance: BigDecimal!
  name: String!
  seniorAPR: BigDecimal! 
  exposurePercentage: BigDecimal!
  managerStake: BigDecimal! 
  approvalPrice: BigDecimal!
  description: String!
  principal: BigDecimal!
  expectedYield: BigDecimal!
  duration: BigInt!
  maturityDate: BigInt
  collateralType: BigInt!
}

type Manager @entity {
  # address of account
  id: ID!
  reputationScore: BigDecimal!
  markets: [ManagerMarketPair!] @derivedFrom(field: "manager")
}

type ManagerMarketPair @entity {
  id: ID! # Set to `manager.id.concat(market.id)`
  manager: Manager!
  market: Market!
  longZCBCollateral: BigDecimal!
  shortZCBCollateral: BigDecimal!
}

type BondPool @entity {
  # address
  id: ID!
  longZCB: ZCBToken!
  shortZCB: ZCBToken!
  longZCBPrice: BigDecimal!
  a_initial: BigDecimal!
  b_initial: BigDecimal!
  b: BigDecimal!
  discountCap: BigDecimal!
  discountedReserved: BigDecimal!
}

type ZCBToken @entity {
  # address
  id: ID!
  # marketId
  marketId: String!
  name: String!
  symbol: String!
  decimals: BigInt!
  totalSupply: BigDecimal!
}

type Token @entity {
  # address
  id: ID!
  name: String!
  symbol: String!
  decimals: BigInt!
  totalSupply: BigDecimal!
}