// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class MarketApproved extends ethereum.Event {
  get params(): MarketApproved__Params {
    return new MarketApproved__Params(this);
  }
}

export class MarketApproved__Params {
  _event: MarketApproved;

  constructor(event: MarketApproved) {
    this._event = event;
  }

  get marketId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get data(): MarketApprovedDataStruct {
    return changetype<MarketApprovedDataStruct>(
      this._event.parameters[1].value.toTuple()
    );
  }
}

export class MarketApprovedDataStruct extends ethereum.Tuple {
  get managers_stake(): BigInt {
    return this[0].toBigInt();
  }

  get approved_principal(): BigInt {
    return this[1].toBigInt();
  }

  get approved_yield(): BigInt {
    return this[2].toBigInt();
  }
}

export class MarketDenied extends ethereum.Event {
  get params(): MarketDenied__Params {
    return new MarketDenied__Params(this);
  }
}

export class MarketDenied__Params {
  _event: MarketDenied;

  constructor(event: MarketDenied) {
    this._event = event;
  }

  get marketId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class MarketInitiated extends ethereum.Event {
  get params(): MarketInitiated__Params {
    return new MarketInitiated__Params(this);
  }
}

export class MarketInitiated__Params {
  _event: MarketInitiated;

  constructor(event: MarketInitiated) {
    this._event = event;
  }

  get marketId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get vault(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get recipient(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get pool(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get longZCB(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get shortZCB(): Address {
    return this._event.parameters[5].value.toAddress();
  }

  get instrumentData(): MarketInitiatedInstrumentDataStruct {
    return changetype<MarketInitiatedInstrumentDataStruct>(
      this._event.parameters[6].value.toTuple()
    );
  }
}

export class MarketInitiatedInstrumentDataStruct extends ethereum.Tuple {
  get name(): Bytes {
    return this[0].toBytes();
  }

  get isPool(): boolean {
    return this[1].toBoolean();
  }

  get trusted(): boolean {
    return this[2].toBoolean();
  }

  get balance(): BigInt {
    return this[3].toBigInt();
  }

  get faceValue(): BigInt {
    return this[4].toBigInt();
  }

  get marketId(): BigInt {
    return this[5].toBigInt();
  }

  get principal(): BigInt {
    return this[6].toBigInt();
  }

  get expectedYield(): BigInt {
    return this[7].toBigInt();
  }

  get duration(): BigInt {
    return this[8].toBigInt();
  }

  get description(): string {
    return this[9].toString();
  }

  get instrument_address(): Address {
    return this[10].toAddress();
  }

  get instrument_type(): i32 {
    return this[11].toI32();
  }

  get maturityDate(): BigInt {
    return this[12].toBigInt();
  }

  get poolData(): MarketInitiatedInstrumentDataPoolDataStruct {
    return changetype<MarketInitiatedInstrumentDataPoolDataStruct>(
      this[13].toTuple()
    );
  }
}

export class MarketInitiatedInstrumentDataPoolDataStruct extends ethereum.Tuple {
  get saleAmount(): BigInt {
    return this[0].toBigInt();
  }

  get initPrice(): BigInt {
    return this[1].toBigInt();
  }

  get promisedReturn(): BigInt {
    return this[2].toBigInt();
  }

  get inceptionTime(): BigInt {
    return this[3].toBigInt();
  }

  get inceptionPrice(): BigInt {
    return this[4].toBigInt();
  }

  get leverageFactor(): BigInt {
    return this[5].toBigInt();
  }

  get managementFee(): BigInt {
    return this[6].toBigInt();
  }
}

export class MarketResolved extends ethereum.Event {
  get params(): MarketResolved__Params {
    return new MarketResolved__Params(this);
  }
}

export class MarketResolved__Params {
  _event: MarketResolved;

  constructor(event: MarketResolved) {
    this._event = event;
  }

  get marketId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get atLoss(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }

  get extraGain(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get principalLoss(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get premature(): boolean {
    return this._event.parameters[4].value.toBoolean();
  }
}

export class RedeemTransfer extends ethereum.Event {
  get params(): RedeemTransfer__Params {
    return new RedeemTransfer__Params(this);
  }
}

export class RedeemTransfer__Params {
  _event: RedeemTransfer;

  constructor(event: RedeemTransfer) {
    this._event = event;
  }

  get marketId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get to(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class VaultCreated extends ethereum.Event {
  get params(): VaultCreated__Params {
    return new VaultCreated__Params(this);
  }
}

export class VaultCreated__Params {
  _event: VaultCreated;

  constructor(event: VaultCreated) {
    this._event = event;
  }

  get vault(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get vaultId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get underlying(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get onlyVerified(): boolean {
    return this._event.parameters[3].value.toBoolean();
  }

  get r(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get assetLimit(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get totalAssetLimit(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get defaultParams(): VaultCreatedDefaultParamsStruct {
    return changetype<VaultCreatedDefaultParamsStruct>(
      this._event.parameters[7].value.toTuple()
    );
  }
}

export class VaultCreatedDefaultParamsStruct extends ethereum.Tuple {
  get N(): BigInt {
    return this[0].toBigInt();
  }

  get sigma(): BigInt {
    return this[1].toBigInt();
  }

  get alpha(): BigInt {
    return this[2].toBigInt();
  }

  get omega(): BigInt {
    return this[3].toBigInt();
  }

  get delta(): BigInt {
    return this[4].toBigInt();
  }

  get r(): BigInt {
    return this[5].toBigInt();
  }

  get s(): BigInt {
    return this[6].toBigInt();
  }

  get steak(): BigInt {
    return this[7].toBigInt();
  }
}

export class Controller__getApprovalDataResultValue0Struct extends ethereum.Tuple {
  get managers_stake(): BigInt {
    return this[0].toBigInt();
  }

  get approved_principal(): BigInt {
    return this[1].toBigInt();
  }

  get approved_yield(): BigInt {
    return this[2].toBigInt();
  }
}

export class Controller__getInstrumentSnapShotResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt, value3: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    return map;
  }

  getManagerStake(): BigInt {
    return this.value0;
  }

  getExposurePercentage(): BigInt {
    return this.value1;
  }

  getSeniorAPR(): BigInt {
    return this.value2;
  }

  getApprovalPrice(): BigInt {
    return this.value3;
  }
}

export class Controller__getVaultSnapShotResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt, value3: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    return map;
  }

  getTotalProtection(): BigInt {
    return this.value0;
  }

  getTotalEstimatedAPR(): BigInt {
    return this.value1;
  }

  getGoalAPR(): BigInt {
    return this.value2;
  }

  getExchangeRate(): BigInt {
    return this.value3;
  }
}

export class Controller__market_dataResult {
  value0: Address;
  value1: Address;

  constructor(value0: Address, value1: Address) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    return map;
  }

  getInstrument_address(): Address {
    return this.value0;
  }

  getUtilizer(): Address {
    return this.value1;
  }
}

export class Controller extends ethereum.SmartContract {
  static bind(address: Address): Controller {
    return new Controller("Controller", address);
  }

  ad_to_id(param0: Address): BigInt {
    let result = super.call("ad_to_id", "ad_to_id(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_ad_to_id(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("ad_to_id", "ad_to_id(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  approvalCondition(marketId: BigInt): boolean {
    let result = super.call(
      "approvalCondition",
      "approvalCondition(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(marketId)]
    );

    return result[0].toBoolean();
  }

  try_approvalCondition(marketId: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "approvalCondition",
      "approvalCondition(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(marketId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  deniedValidator(marketId: BigInt, validator: Address): BigInt {
    let result = super.call(
      "deniedValidator",
      "deniedValidator(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(marketId),
        ethereum.Value.fromAddress(validator)
      ]
    );

    return result[0].toBigInt();
  }

  try_deniedValidator(
    marketId: BigInt,
    validator: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "deniedValidator",
      "deniedValidator(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(marketId),
        ethereum.Value.fromAddress(validator)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  forceCloseInstrument(marketId: BigInt, emergency: boolean): boolean {
    let result = super.call(
      "forceCloseInstrument",
      "forceCloseInstrument(uint256,bool):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(marketId),
        ethereum.Value.fromBoolean(emergency)
      ]
    );

    return result[0].toBoolean();
  }

  try_forceCloseInstrument(
    marketId: BigInt,
    emergency: boolean
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "forceCloseInstrument",
      "forceCloseInstrument(uint256,bool):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(marketId),
        ethereum.Value.fromBoolean(emergency)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getApprovalData(
    marketId: BigInt
  ): Controller__getApprovalDataResultValue0Struct {
    let result = super.call(
      "getApprovalData",
      "getApprovalData(uint256):((uint256,uint256,uint256))",
      [ethereum.Value.fromUnsignedBigInt(marketId)]
    );

    return changetype<Controller__getApprovalDataResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getApprovalData(
    marketId: BigInt
  ): ethereum.CallResult<Controller__getApprovalDataResultValue0Struct> {
    let result = super.tryCall(
      "getApprovalData",
      "getApprovalData(uint256):((uint256,uint256,uint256))",
      [ethereum.Value.fromUnsignedBigInt(marketId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Controller__getApprovalDataResultValue0Struct>(
        value[0].toTuple()
      )
    );
  }

  getFinalStake(marketId: BigInt): BigInt {
    let result = super.call(
      "getFinalStake",
      "getFinalStake(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(marketId)]
    );

    return result[0].toBigInt();
  }

  try_getFinalStake(marketId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getFinalStake",
      "getFinalStake(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(marketId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getInitialStake(marketId: BigInt): BigInt {
    let result = super.call(
      "getInitialStake",
      "getInitialStake(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(marketId)]
    );

    return result[0].toBigInt();
  }

  try_getInitialStake(marketId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getInitialStake",
      "getInitialStake(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(marketId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getInstrumentSnapShot(
    marketId: BigInt
  ): Controller__getInstrumentSnapShotResult {
    let result = super.call(
      "getInstrumentSnapShot",
      "getInstrumentSnapShot(uint256):(uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(marketId)]
    );

    return new Controller__getInstrumentSnapShotResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt()
    );
  }

  try_getInstrumentSnapShot(
    marketId: BigInt
  ): ethereum.CallResult<Controller__getInstrumentSnapShotResult> {
    let result = super.tryCall(
      "getInstrumentSnapShot",
      "getInstrumentSnapShot(uint256):(uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(marketId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Controller__getInstrumentSnapShotResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt()
      )
    );
  }

  getMarketId(recipient: Address): BigInt {
    let result = super.call("getMarketId", "getMarketId(address):(uint256)", [
      ethereum.Value.fromAddress(recipient)
    ]);

    return result[0].toBigInt();
  }

  try_getMarketId(recipient: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getMarketId",
      "getMarketId(address):(uint256)",
      [ethereum.Value.fromAddress(recipient)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getMarketIds(vaultId: BigInt): Array<BigInt> {
    let result = super.call(
      "getMarketIds",
      "getMarketIds(uint256):(uint256[])",
      [ethereum.Value.fromUnsignedBigInt(vaultId)]
    );

    return result[0].toBigIntArray();
  }

  try_getMarketIds(vaultId: BigInt): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getMarketIds",
      "getMarketIds(uint256):(uint256[])",
      [ethereum.Value.fromUnsignedBigInt(vaultId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getNumApproved(marketId: BigInt): BigInt {
    let result = super.call(
      "getNumApproved",
      "getNumApproved(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(marketId)]
    );

    return result[0].toBigInt();
  }

  try_getNumApproved(marketId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getNumApproved",
      "getNumApproved(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(marketId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getNumResolved(marketId: BigInt): BigInt {
    let result = super.call(
      "getNumResolved",
      "getNumResolved(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(marketId)]
    );

    return result[0].toBigInt();
  }

  try_getNumResolved(marketId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getNumResolved",
      "getNumResolved(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(marketId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTotalStaked(marketId: BigInt): BigInt {
    let result = super.call(
      "getTotalStaked",
      "getTotalStaked(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(marketId)]
    );

    return result[0].toBigInt();
  }

  try_getTotalStaked(marketId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTotalStaked",
      "getTotalStaked(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(marketId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTotalSupply(marketId: BigInt): BigInt {
    let result = super.call(
      "getTotalSupply",
      "getTotalSupply(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(marketId)]
    );

    return result[0].toBigInt();
  }

  try_getTotalSupply(marketId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTotalSupply",
      "getTotalSupply(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(marketId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTotalValidatorSales(marketId: BigInt): BigInt {
    let result = super.call(
      "getTotalValidatorSales",
      "getTotalValidatorSales(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(marketId)]
    );

    return result[0].toBigInt();
  }

  try_getTotalValidatorSales(marketId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTotalValidatorSales",
      "getTotalValidatorSales(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(marketId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTraderScore(trader: Address): BigInt {
    let result = super.call(
      "getTraderScore",
      "getTraderScore(address):(uint256)",
      [ethereum.Value.fromAddress(trader)]
    );

    return result[0].toBigInt();
  }

  try_getTraderScore(trader: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTraderScore",
      "getTraderScore(address):(uint256)",
      [ethereum.Value.fromAddress(trader)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getValidatorCap(marketId: BigInt): BigInt {
    let result = super.call(
      "getValidatorCap",
      "getValidatorCap(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(marketId)]
    );

    return result[0].toBigInt();
  }

  try_getValidatorCap(marketId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getValidatorCap",
      "getValidatorCap(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(marketId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getValidatorPrice(marketId: BigInt): BigInt {
    let result = super.call(
      "getValidatorPrice",
      "getValidatorPrice(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(marketId)]
    );

    return result[0].toBigInt();
  }

  try_getValidatorPrice(marketId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getValidatorPrice",
      "getValidatorPrice(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(marketId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getValidatorRequiredCollateral(marketId: BigInt): BigInt {
    let result = super.call(
      "getValidatorRequiredCollateral",
      "getValidatorRequiredCollateral(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(marketId)]
    );

    return result[0].toBigInt();
  }

  try_getValidatorRequiredCollateral(
    marketId: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getValidatorRequiredCollateral",
      "getValidatorRequiredCollateral(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(marketId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getVault(marketId: BigInt): Address {
    let result = super.call("getVault", "getVault(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(marketId)
    ]);

    return result[0].toAddress();
  }

  try_getVault(marketId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("getVault", "getVault(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(marketId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getVaultAd(marketId: BigInt): Address {
    let result = super.call("getVaultAd", "getVaultAd(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(marketId)
    ]);

    return result[0].toAddress();
  }

  try_getVaultAd(marketId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("getVaultAd", "getVaultAd(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(marketId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getVaultSnapShot(vaultId: BigInt): Controller__getVaultSnapShotResult {
    let result = super.call(
      "getVaultSnapShot",
      "getVaultSnapShot(uint256):(uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(vaultId)]
    );

    return new Controller__getVaultSnapShotResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt()
    );
  }

  try_getVaultSnapShot(
    vaultId: BigInt
  ): ethereum.CallResult<Controller__getVaultSnapShotResult> {
    let result = super.tryCall(
      "getVaultSnapShot",
      "getVaultSnapShot(uint256):(uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(vaultId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Controller__getVaultSnapShotResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt()
      )
    );
  }

  getVaultfromId(vaultId: BigInt): Address {
    let result = super.call(
      "getVaultfromId",
      "getVaultfromId(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(vaultId)]
    );

    return result[0].toAddress();
  }

  try_getVaultfromId(vaultId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getVaultfromId",
      "getVaultfromId(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(vaultId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  hasApproved(marketId: BigInt, validator: Address): boolean {
    let result = super.call(
      "hasApproved",
      "hasApproved(uint256,address):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(marketId),
        ethereum.Value.fromAddress(validator)
      ]
    );

    return result[0].toBoolean();
  }

  try_hasApproved(
    marketId: BigInt,
    validator: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "hasApproved",
      "hasApproved(uint256,address):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(marketId),
        ethereum.Value.fromAddress(validator)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  id_parent(param0: BigInt): BigInt {
    let result = super.call("id_parent", "id_parent(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toBigInt();
  }

  try_id_parent(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("id_parent", "id_parent(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isReputable(trader: Address, r: BigInt): boolean {
    let result = super.call(
      "isReputable",
      "isReputable(address,uint256):(bool)",
      [ethereum.Value.fromAddress(trader), ethereum.Value.fromUnsignedBigInt(r)]
    );

    return result[0].toBoolean();
  }

  try_isReputable(trader: Address, r: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isReputable",
      "isReputable(address,uint256):(bool)",
      [ethereum.Value.fromAddress(trader), ethereum.Value.fromUnsignedBigInt(r)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isValidator(marketId: BigInt, user: Address): boolean {
    let result = super.call(
      "isValidator",
      "isValidator(uint256,address):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(marketId),
        ethereum.Value.fromAddress(user)
      ]
    );

    return result[0].toBoolean();
  }

  try_isValidator(
    marketId: BigInt,
    user: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isValidator",
      "isValidator(uint256,address):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(marketId),
        ethereum.Value.fromAddress(user)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isVerified(addr: Address): boolean {
    let result = super.call("isVerified", "isVerified(address):(bool)", [
      ethereum.Value.fromAddress(addr)
    ]);

    return result[0].toBoolean();
  }

  try_isVerified(addr: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isVerified", "isVerified(address):(bool)", [
      ethereum.Value.fromAddress(addr)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  marketCondition(marketId: BigInt): boolean {
    let result = super.call(
      "marketCondition",
      "marketCondition(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(marketId)]
    );

    return result[0].toBoolean();
  }

  try_marketCondition(marketId: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "marketCondition",
      "marketCondition(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(marketId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  marketIdToVaultId(marketId: BigInt): BigInt {
    let result = super.call(
      "marketIdToVaultId",
      "marketIdToVaultId(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(marketId)]
    );

    return result[0].toBigInt();
  }

  try_marketIdToVaultId(marketId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "marketIdToVaultId",
      "marketIdToVaultId(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(marketId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  marketId_to_vaultId(marketId: BigInt): BigInt {
    let result = super.call(
      "marketId_to_vaultId",
      "marketId_to_vaultId(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(marketId)]
    );

    return result[0].toBigInt();
  }

  try_marketId_to_vaultId(marketId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "marketId_to_vaultId",
      "marketId_to_vaultId(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(marketId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  market_data(param0: BigInt): Controller__market_dataResult {
    let result = super.call(
      "market_data",
      "market_data(uint256):(address,address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new Controller__market_dataResult(
      result[0].toAddress(),
      result[1].toAddress()
    );
  }

  try_market_data(
    param0: BigInt
  ): ethereum.CallResult<Controller__market_dataResult> {
    let result = super.tryCall(
      "market_data",
      "market_data(uint256):(address,address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Controller__market_dataResult(
        value[0].toAddress(),
        value[1].toAddress()
      )
    );
  }

  resolveCondition(marketId: BigInt): boolean {
    let result = super.call(
      "resolveCondition",
      "resolveCondition(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(marketId)]
    );

    return result[0].toBoolean();
  }

  try_resolveCondition(marketId: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "resolveCondition",
      "resolveCondition(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(marketId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  validatorApprove(marketId: BigInt): BigInt {
    let result = super.call(
      "validatorApprove",
      "validatorApprove(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(marketId)]
    );

    return result[0].toBigInt();
  }

  try_validatorApprove(marketId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "validatorApprove",
      "validatorApprove(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(marketId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  vault_to_marketIds(param0: BigInt, param1: BigInt): BigInt {
    let result = super.call(
      "vault_to_marketIds",
      "vault_to_marketIds(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toBigInt();
  }

  try_vault_to_marketIds(
    param0: BigInt,
    param1: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "vault_to_marketIds",
      "vault_to_marketIds(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  vaults(param0: BigInt): Address {
    let result = super.call("vaults", "vaults(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_vaults(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("vaults", "vaults(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  verified(param0: Address): boolean {
    let result = super.call("verified", "verified(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBoolean();
  }

  try_verified(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("verified", "verified(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  viewValidators(marketId: BigInt): Array<Address> {
    let result = super.call(
      "viewValidators",
      "viewValidators(uint256):(address[])",
      [ethereum.Value.fromUnsignedBigInt(marketId)]
    );

    return result[0].toAddressArray();
  }

  try_viewValidators(marketId: BigInt): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "viewValidators",
      "viewValidators(uint256):(address[])",
      [ethereum.Value.fromUnsignedBigInt(marketId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _creator_address(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _interep_address(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ApproveMarketCall extends ethereum.Call {
  get inputs(): ApproveMarketCall__Inputs {
    return new ApproveMarketCall__Inputs(this);
  }

  get outputs(): ApproveMarketCall__Outputs {
    return new ApproveMarketCall__Outputs(this);
  }
}

export class ApproveMarketCall__Inputs {
  _call: ApproveMarketCall;

  constructor(call: ApproveMarketCall) {
    this._call = call;
  }

  get marketId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ApproveMarketCall__Outputs {
  _call: ApproveMarketCall;

  constructor(call: ApproveMarketCall) {
    this._call = call;
  }
}

export class BeforeResolveCall extends ethereum.Call {
  get inputs(): BeforeResolveCall__Inputs {
    return new BeforeResolveCall__Inputs(this);
  }

  get outputs(): BeforeResolveCall__Outputs {
    return new BeforeResolveCall__Outputs(this);
  }
}

export class BeforeResolveCall__Inputs {
  _call: BeforeResolveCall;

  constructor(call: BeforeResolveCall) {
    this._call = call;
  }

  get marketId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class BeforeResolveCall__Outputs {
  _call: BeforeResolveCall;

  constructor(call: BeforeResolveCall) {
    this._call = call;
  }
}

export class CreateVaultCall extends ethereum.Call {
  get inputs(): CreateVaultCall__Inputs {
    return new CreateVaultCall__Inputs(this);
  }

  get outputs(): CreateVaultCall__Outputs {
    return new CreateVaultCall__Outputs(this);
  }
}

export class CreateVaultCall__Inputs {
  _call: CreateVaultCall;

  constructor(call: CreateVaultCall) {
    this._call = call;
  }

  get underlying(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _onlyVerified(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }

  get _r(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _asset_limit(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _total_asset_limit(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get default_params(): CreateVaultCallDefault_paramsStruct {
    return changetype<CreateVaultCallDefault_paramsStruct>(
      this._call.inputValues[5].value.toTuple()
    );
  }

  get _description(): string {
    return this._call.inputValues[6].value.toString();
  }
}

export class CreateVaultCall__Outputs {
  _call: CreateVaultCall;

  constructor(call: CreateVaultCall) {
    this._call = call;
  }
}

export class CreateVaultCallDefault_paramsStruct extends ethereum.Tuple {
  get N(): BigInt {
    return this[0].toBigInt();
  }

  get sigma(): BigInt {
    return this[1].toBigInt();
  }

  get alpha(): BigInt {
    return this[2].toBigInt();
  }

  get omega(): BigInt {
    return this[3].toBigInt();
  }

  get delta(): BigInt {
    return this[4].toBigInt();
  }

  get r(): BigInt {
    return this[5].toBigInt();
  }

  get s(): BigInt {
    return this[6].toBigInt();
  }

  get steak(): BigInt {
    return this[7].toBigInt();
  }
}

export class DeniedValidatorCall extends ethereum.Call {
  get inputs(): DeniedValidatorCall__Inputs {
    return new DeniedValidatorCall__Inputs(this);
  }

  get outputs(): DeniedValidatorCall__Outputs {
    return new DeniedValidatorCall__Outputs(this);
  }
}

export class DeniedValidatorCall__Inputs {
  _call: DeniedValidatorCall;

  constructor(call: DeniedValidatorCall) {
    this._call = call;
  }

  get marketId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get validator(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class DeniedValidatorCall__Outputs {
  _call: DeniedValidatorCall;

  constructor(call: DeniedValidatorCall) {
    this._call = call;
  }

  get collateral_amount(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class DenyMarketCall extends ethereum.Call {
  get inputs(): DenyMarketCall__Inputs {
    return new DenyMarketCall__Inputs(this);
  }

  get outputs(): DenyMarketCall__Outputs {
    return new DenyMarketCall__Outputs(this);
  }
}

export class DenyMarketCall__Inputs {
  _call: DenyMarketCall;

  constructor(call: DenyMarketCall) {
    this._call = call;
  }

  get marketId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class DenyMarketCall__Outputs {
  _call: DenyMarketCall;

  constructor(call: DenyMarketCall) {
    this._call = call;
  }
}

export class ForceCloseInstrumentCall extends ethereum.Call {
  get inputs(): ForceCloseInstrumentCall__Inputs {
    return new ForceCloseInstrumentCall__Inputs(this);
  }

  get outputs(): ForceCloseInstrumentCall__Outputs {
    return new ForceCloseInstrumentCall__Outputs(this);
  }
}

export class ForceCloseInstrumentCall__Inputs {
  _call: ForceCloseInstrumentCall;

  constructor(call: ForceCloseInstrumentCall) {
    this._call = call;
  }

  get marketId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get emergency(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class ForceCloseInstrumentCall__Outputs {
  _call: ForceCloseInstrumentCall;

  constructor(call: ForceCloseInstrumentCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class FulfillRandomWordsCall extends ethereum.Call {
  get inputs(): FulfillRandomWordsCall__Inputs {
    return new FulfillRandomWordsCall__Inputs(this);
  }

  get outputs(): FulfillRandomWordsCall__Outputs {
    return new FulfillRandomWordsCall__Outputs(this);
  }
}

export class FulfillRandomWordsCall__Inputs {
  _call: FulfillRandomWordsCall;

  constructor(call: FulfillRandomWordsCall) {
    this._call = call;
  }

  get requestId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get randomWords(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }
}

export class FulfillRandomWordsCall__Outputs {
  _call: FulfillRandomWordsCall;

  constructor(call: FulfillRandomWordsCall) {
    this._call = call;
  }
}

export class InitiateMarketCall extends ethereum.Call {
  get inputs(): InitiateMarketCall__Inputs {
    return new InitiateMarketCall__Inputs(this);
  }

  get outputs(): InitiateMarketCall__Outputs {
    return new InitiateMarketCall__Outputs(this);
  }
}

export class InitiateMarketCall__Inputs {
  _call: InitiateMarketCall;

  constructor(call: InitiateMarketCall) {
    this._call = call;
  }

  get recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get instrumentData(): InitiateMarketCallInstrumentDataStruct {
    return changetype<InitiateMarketCallInstrumentDataStruct>(
      this._call.inputValues[1].value.toTuple()
    );
  }

  get vaultId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class InitiateMarketCall__Outputs {
  _call: InitiateMarketCall;

  constructor(call: InitiateMarketCall) {
    this._call = call;
  }
}

export class InitiateMarketCallInstrumentDataStruct extends ethereum.Tuple {
  get name(): Bytes {
    return this[0].toBytes();
  }

  get isPool(): boolean {
    return this[1].toBoolean();
  }

  get trusted(): boolean {
    return this[2].toBoolean();
  }

  get balance(): BigInt {
    return this[3].toBigInt();
  }

  get faceValue(): BigInt {
    return this[4].toBigInt();
  }

  get marketId(): BigInt {
    return this[5].toBigInt();
  }

  get principal(): BigInt {
    return this[6].toBigInt();
  }

  get expectedYield(): BigInt {
    return this[7].toBigInt();
  }

  get duration(): BigInt {
    return this[8].toBigInt();
  }

  get description(): string {
    return this[9].toString();
  }

  get instrument_address(): Address {
    return this[10].toAddress();
  }

  get instrument_type(): i32 {
    return this[11].toI32();
  }

  get maturityDate(): BigInt {
    return this[12].toBigInt();
  }

  get poolData(): InitiateMarketCallInstrumentDataPoolDataStruct {
    return changetype<InitiateMarketCallInstrumentDataPoolDataStruct>(
      this[13].toTuple()
    );
  }
}

export class InitiateMarketCallInstrumentDataPoolDataStruct extends ethereum.Tuple {
  get saleAmount(): BigInt {
    return this[0].toBigInt();
  }

  get initPrice(): BigInt {
    return this[1].toBigInt();
  }

  get promisedReturn(): BigInt {
    return this[2].toBigInt();
  }

  get inceptionTime(): BigInt {
    return this[3].toBigInt();
  }

  get inceptionPrice(): BigInt {
    return this[4].toBigInt();
  }

  get leverageFactor(): BigInt {
    return this[5].toBigInt();
  }

  get managementFee(): BigInt {
    return this[6].toBigInt();
  }
}

export class PullLeverageCall extends ethereum.Call {
  get inputs(): PullLeverageCall__Inputs {
    return new PullLeverageCall__Inputs(this);
  }

  get outputs(): PullLeverageCall__Outputs {
    return new PullLeverageCall__Outputs(this);
  }
}

export class PullLeverageCall__Inputs {
  _call: PullLeverageCall;

  constructor(call: PullLeverageCall) {
    this._call = call;
  }

  get marketId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class PullLeverageCall__Outputs {
  _call: PullLeverageCall;

  constructor(call: PullLeverageCall) {
    this._call = call;
  }
}

export class RedeemValidatorCall extends ethereum.Call {
  get inputs(): RedeemValidatorCall__Inputs {
    return new RedeemValidatorCall__Inputs(this);
  }

  get outputs(): RedeemValidatorCall__Outputs {
    return new RedeemValidatorCall__Outputs(this);
  }
}

export class RedeemValidatorCall__Inputs {
  _call: RedeemValidatorCall;

  constructor(call: RedeemValidatorCall) {
    this._call = call;
  }

  get marketId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get validator(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RedeemValidatorCall__Outputs {
  _call: RedeemValidatorCall;

  constructor(call: RedeemValidatorCall) {
    this._call = call;
  }
}

export class Redeem_transferCall extends ethereum.Call {
  get inputs(): Redeem_transferCall__Inputs {
    return new Redeem_transferCall__Inputs(this);
  }

  get outputs(): Redeem_transferCall__Outputs {
    return new Redeem_transferCall__Outputs(this);
  }
}

export class Redeem_transferCall__Inputs {
  _call: Redeem_transferCall;

  constructor(call: Redeem_transferCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get marketId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class Redeem_transferCall__Outputs {
  _call: Redeem_transferCall;

  constructor(call: Redeem_transferCall) {
    this._call = call;
  }
}

export class ResolveMarketCall extends ethereum.Call {
  get inputs(): ResolveMarketCall__Inputs {
    return new ResolveMarketCall__Inputs(this);
  }

  get outputs(): ResolveMarketCall__Outputs {
    return new ResolveMarketCall__Outputs(this);
  }
}

export class ResolveMarketCall__Inputs {
  _call: ResolveMarketCall;

  constructor(call: ResolveMarketCall) {
    this._call = call;
  }

  get marketId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ResolveMarketCall__Outputs {
  _call: ResolveMarketCall;

  constructor(call: ResolveMarketCall) {
    this._call = call;
  }
}

export class SetMarketManagerCall extends ethereum.Call {
  get inputs(): SetMarketManagerCall__Inputs {
    return new SetMarketManagerCall__Inputs(this);
  }

  get outputs(): SetMarketManagerCall__Outputs {
    return new SetMarketManagerCall__Outputs(this);
  }
}

export class SetMarketManagerCall__Inputs {
  _call: SetMarketManagerCall;

  constructor(call: SetMarketManagerCall) {
    this._call = call;
  }

  get _marketManager(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetMarketManagerCall__Outputs {
  _call: SetMarketManagerCall;

  constructor(call: SetMarketManagerCall) {
    this._call = call;
  }
}

export class SetPoolFactoryCall extends ethereum.Call {
  get inputs(): SetPoolFactoryCall__Inputs {
    return new SetPoolFactoryCall__Inputs(this);
  }

  get outputs(): SetPoolFactoryCall__Outputs {
    return new SetPoolFactoryCall__Outputs(this);
  }
}

export class SetPoolFactoryCall__Inputs {
  _call: SetPoolFactoryCall;

  constructor(call: SetPoolFactoryCall) {
    this._call = call;
  }

  get _poolFactory(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetPoolFactoryCall__Outputs {
  _call: SetPoolFactoryCall;

  constructor(call: SetPoolFactoryCall) {
    this._call = call;
  }
}

export class SetReputationManagerCall extends ethereum.Call {
  get inputs(): SetReputationManagerCall__Inputs {
    return new SetReputationManagerCall__Inputs(this);
  }

  get outputs(): SetReputationManagerCall__Outputs {
    return new SetReputationManagerCall__Outputs(this);
  }
}

export class SetReputationManagerCall__Inputs {
  _call: SetReputationManagerCall;

  constructor(call: SetReputationManagerCall) {
    this._call = call;
  }

  get _reputationManager(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetReputationManagerCall__Outputs {
  _call: SetReputationManagerCall;

  constructor(call: SetReputationManagerCall) {
    this._call = call;
  }
}

export class SetValidatorManagerCall extends ethereum.Call {
  get inputs(): SetValidatorManagerCall__Inputs {
    return new SetValidatorManagerCall__Inputs(this);
  }

  get outputs(): SetValidatorManagerCall__Outputs {
    return new SetValidatorManagerCall__Outputs(this);
  }
}

export class SetValidatorManagerCall__Inputs {
  _call: SetValidatorManagerCall;

  constructor(call: SetValidatorManagerCall) {
    this._call = call;
  }

  get _validatorManager(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetValidatorManagerCall__Outputs {
  _call: SetValidatorManagerCall;

  constructor(call: SetValidatorManagerCall) {
    this._call = call;
  }
}

export class SetVaultFactoryCall extends ethereum.Call {
  get inputs(): SetVaultFactoryCall__Inputs {
    return new SetVaultFactoryCall__Inputs(this);
  }

  get outputs(): SetVaultFactoryCall__Outputs {
    return new SetVaultFactoryCall__Outputs(this);
  }
}

export class SetVaultFactoryCall__Inputs {
  _call: SetVaultFactoryCall;

  constructor(call: SetVaultFactoryCall) {
    this._call = call;
  }

  get _vaultFactory(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetVaultFactoryCall__Outputs {
  _call: SetVaultFactoryCall;

  constructor(call: SetVaultFactoryCall) {
    this._call = call;
  }
}

export class TestApproveMarketCall extends ethereum.Call {
  get inputs(): TestApproveMarketCall__Inputs {
    return new TestApproveMarketCall__Inputs(this);
  }

  get outputs(): TestApproveMarketCall__Outputs {
    return new TestApproveMarketCall__Outputs(this);
  }
}

export class TestApproveMarketCall__Inputs {
  _call: TestApproveMarketCall;

  constructor(call: TestApproveMarketCall) {
    this._call = call;
  }

  get marketId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class TestApproveMarketCall__Outputs {
  _call: TestApproveMarketCall;

  constructor(call: TestApproveMarketCall) {
    this._call = call;
  }
}

export class TestResolveMarketCall extends ethereum.Call {
  get inputs(): TestResolveMarketCall__Inputs {
    return new TestResolveMarketCall__Inputs(this);
  }

  get outputs(): TestResolveMarketCall__Outputs {
    return new TestResolveMarketCall__Outputs(this);
  }
}

export class TestResolveMarketCall__Inputs {
  _call: TestResolveMarketCall;

  constructor(call: TestResolveMarketCall) {
    this._call = call;
  }

  get marketId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class TestResolveMarketCall__Outputs {
  _call: TestResolveMarketCall;

  constructor(call: TestResolveMarketCall) {
    this._call = call;
  }
}

export class TestVerifyAddressCall extends ethereum.Call {
  get inputs(): TestVerifyAddressCall__Inputs {
    return new TestVerifyAddressCall__Inputs(this);
  }

  get outputs(): TestVerifyAddressCall__Outputs {
    return new TestVerifyAddressCall__Outputs(this);
  }
}

export class TestVerifyAddressCall__Inputs {
  _call: TestVerifyAddressCall;

  constructor(call: TestVerifyAddressCall) {
    this._call = call;
  }
}

export class TestVerifyAddressCall__Outputs {
  _call: TestVerifyAddressCall;

  constructor(call: TestVerifyAddressCall) {
    this._call = call;
  }
}

export class UnlockValidatorStakeCall extends ethereum.Call {
  get inputs(): UnlockValidatorStakeCall__Inputs {
    return new UnlockValidatorStakeCall__Inputs(this);
  }

  get outputs(): UnlockValidatorStakeCall__Outputs {
    return new UnlockValidatorStakeCall__Outputs(this);
  }
}

export class UnlockValidatorStakeCall__Inputs {
  _call: UnlockValidatorStakeCall;

  constructor(call: UnlockValidatorStakeCall) {
    this._call = call;
  }

  get marketId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UnlockValidatorStakeCall__Outputs {
  _call: UnlockValidatorStakeCall;

  constructor(call: UnlockValidatorStakeCall) {
    this._call = call;
  }
}

export class ValidatorApproveCall extends ethereum.Call {
  get inputs(): ValidatorApproveCall__Inputs {
    return new ValidatorApproveCall__Inputs(this);
  }

  get outputs(): ValidatorApproveCall__Outputs {
    return new ValidatorApproveCall__Outputs(this);
  }
}

export class ValidatorApproveCall__Inputs {
  _call: ValidatorApproveCall;

  constructor(call: ValidatorApproveCall) {
    this._call = call;
  }

  get marketId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ValidatorApproveCall__Outputs {
  _call: ValidatorApproveCall;

  constructor(call: ValidatorApproveCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class ValidatorResolveCall extends ethereum.Call {
  get inputs(): ValidatorResolveCall__Inputs {
    return new ValidatorResolveCall__Inputs(this);
  }

  get outputs(): ValidatorResolveCall__Outputs {
    return new ValidatorResolveCall__Outputs(this);
  }
}

export class ValidatorResolveCall__Inputs {
  _call: ValidatorResolveCall;

  constructor(call: ValidatorResolveCall) {
    this._call = call;
  }

  get marketId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ValidatorResolveCall__Outputs {
  _call: ValidatorResolveCall;

  constructor(call: ValidatorResolveCall) {
    this._call = call;
  }
}
