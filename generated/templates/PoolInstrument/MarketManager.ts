// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class BondBuy extends ethereum.Event {
  get params(): BondBuy__Params {
    return new BondBuy__Params(this);
  }
}

export class BondBuy__Params {
  _event: BondBuy;

  constructor(event: BondBuy) {
    this._event = event;
  }

  get marketId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get trader(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amountIn(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get amountOut(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class DeactivatedMarket extends ethereum.Event {
  get params(): DeactivatedMarket__Params {
    return new DeactivatedMarket__Params(this);
  }
}

export class DeactivatedMarket__Params {
  _event: DeactivatedMarket;

  constructor(event: DeactivatedMarket) {
    this._event = event;
  }

  get marketId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get atLoss(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }

  get resolve(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }

  get rp(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class MarketApproved extends ethereum.Event {
  get params(): MarketApproved__Params {
    return new MarketApproved__Params(this);
  }
}

export class MarketApproved__Params {
  _event: MarketApproved;

  constructor(event: MarketApproved) {
    this._event = event;
  }

  get marketId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class MarketCollateralUpdate extends ethereum.Event {
  get params(): MarketCollateralUpdate__Params {
    return new MarketCollateralUpdate__Params(this);
  }
}

export class MarketCollateralUpdate__Params {
  _event: MarketCollateralUpdate;

  constructor(event: MarketCollateralUpdate) {
    this._event = event;
  }

  get marketId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get totalCollateral(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class MarketDenied extends ethereum.Event {
  get params(): MarketDenied__Params {
    return new MarketDenied__Params(this);
  }
}

export class MarketDenied__Params {
  _event: MarketDenied;

  constructor(event: MarketDenied) {
    this._event = event;
  }

  get marketId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class MarketParametersSet extends ethereum.Event {
  get params(): MarketParametersSet__Params {
    return new MarketParametersSet__Params(this);
  }
}

export class MarketParametersSet__Params {
  _event: MarketParametersSet;

  constructor(event: MarketParametersSet) {
    this._event = event;
  }

  get marketId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get params(): MarketParametersSetParamsStruct {
    return changetype<MarketParametersSetParamsStruct>(
      this._event.parameters[1].value.toTuple()
    );
  }
}

export class MarketParametersSetParamsStruct extends ethereum.Tuple {
  get N(): BigInt {
    return this[0].toBigInt();
  }

  get sigma(): BigInt {
    return this[1].toBigInt();
  }

  get alpha(): BigInt {
    return this[2].toBigInt();
  }

  get omega(): BigInt {
    return this[3].toBigInt();
  }

  get delta(): BigInt {
    return this[4].toBigInt();
  }

  get r(): BigInt {
    return this[5].toBigInt();
  }

  get s(): BigInt {
    return this[6].toBigInt();
  }

  get steak(): BigInt {
    return this[7].toBigInt();
  }
}

export class MarketPhaseSet extends ethereum.Event {
  get params(): MarketPhaseSet__Params {
    return new MarketPhaseSet__Params(this);
  }
}

export class MarketPhaseSet__Params {
  _event: MarketPhaseSet;

  constructor(event: MarketPhaseSet) {
    this._event = event;
  }

  get marketId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get data(): MarketPhaseSetDataStruct {
    return changetype<MarketPhaseSetDataStruct>(
      this._event.parameters[1].value.toTuple()
    );
  }
}

export class MarketPhaseSetDataStruct extends ethereum.Tuple {
  get duringAssessment(): boolean {
    return this[0].toBoolean();
  }

  get onlyReputable(): boolean {
    return this[1].toBoolean();
  }

  get resolved(): boolean {
    return this[2].toBoolean();
  }

  get alive(): boolean {
    return this[3].toBoolean();
  }

  get atLoss(): boolean {
    return this[4].toBoolean();
  }

  get base_budget(): BigInt {
    return this[5].toBigInt();
  }
}

export class MarketReputationSet extends ethereum.Event {
  get params(): MarketReputationSet__Params {
    return new MarketReputationSet__Params(this);
  }
}

export class MarketReputationSet__Params {
  _event: MarketReputationSet;

  constructor(event: MarketReputationSet) {
    this._event = event;
  }

  get marketId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get onlyReputable(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }
}

export class RedeemDenied extends ethereum.Event {
  get params(): RedeemDenied__Params {
    return new RedeemDenied__Params(this);
  }
}

export class RedeemDenied__Params {
  _event: RedeemDenied;

  constructor(event: RedeemDenied) {
    this._event = event;
  }

  get marketId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get trader(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get isLong(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class TraderCollateralUpdate extends ethereum.Event {
  get params(): TraderCollateralUpdate__Params {
    return new TraderCollateralUpdate__Params(this);
  }
}

export class TraderCollateralUpdate__Params {
  _event: TraderCollateralUpdate;

  constructor(event: TraderCollateralUpdate) {
    this._event = event;
  }

  get marketId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get manager(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get totalCollateral(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get isLong(): boolean {
    return this._event.parameters[3].value.toBoolean();
  }
}

export class MarketManager__buyBondResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getAmountIn(): BigInt {
    return this.value0;
  }

  getAmountOut(): BigInt {
    return this.value1;
  }
}

export class MarketManager__buyBondLeveredResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getAmountIn(): BigInt {
    return this.value0;
  }

  getAmountOut(): BigInt {
    return this.value1;
  }
}

export class MarketManager__coverBondShortResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getAmountIn(): BigInt {
    return this.value0;
  }

  getAmountOut(): BigInt {
    return this.value1;
  }
}

export class MarketManager__getMarketResultValue0Struct extends ethereum.Tuple {
  get bondPool(): Address {
    return this[0].toAddress();
  }

  get longZCB(): Address {
    return this[1].toAddress();
  }

  get shortZCB(): Address {
    return this[2].toAddress();
  }

  get description(): string {
    return this[3].toString();
  }

  get creationTimestamp(): BigInt {
    return this[4].toBigInt();
  }

  get resolutionTimestamp(): BigInt {
    return this[5].toBigInt();
  }

  get isPool(): boolean {
    return this[6].toBoolean();
  }
}

export class MarketManager__getParametersResultValue0Struct extends ethereum.Tuple {
  get N(): BigInt {
    return this[0].toBigInt();
  }

  get sigma(): BigInt {
    return this[1].toBigInt();
  }

  get alpha(): BigInt {
    return this[2].toBigInt();
  }

  get omega(): BigInt {
    return this[3].toBigInt();
  }

  get delta(): BigInt {
    return this[4].toBigInt();
  }

  get r(): BigInt {
    return this[5].toBigInt();
  }

  get s(): BigInt {
    return this[6].toBigInt();
  }

  get steak(): BigInt {
    return this[7].toBigInt();
  }
}

export class MarketManager__getPhaseDataResultValue0Struct extends ethereum.Tuple {
  get duringAssessment(): boolean {
    return this[0].toBoolean();
  }

  get onlyReputable(): boolean {
    return this[1].toBoolean();
  }

  get resolved(): boolean {
    return this[2].toBoolean();
  }

  get alive(): boolean {
    return this[3].toBoolean();
  }

  get atLoss(): boolean {
    return this[4].toBoolean();
  }

  get base_budget(): BigInt {
    return this[5].toBigInt();
  }
}

export class MarketManager__leveragePositionResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getDebt(): BigInt {
    return this.value0;
  }

  getAmount(): BigInt {
    return this.value1;
  }
}

export class MarketManager__makeEmptyMarketDataResultValue0Struct extends ethereum.Tuple {
  get bondPool(): Address {
    return this[0].toAddress();
  }

  get longZCB(): Address {
    return this[1].toAddress();
  }

  get shortZCB(): Address {
    return this[2].toAddress();
  }

  get description(): string {
    return this[3].toString();
  }

  get creationTimestamp(): BigInt {
    return this[4].toBigInt();
  }

  get resolutionTimestamp(): BigInt {
    return this[5].toBigInt();
  }

  get isPool(): boolean {
    return this[6].toBoolean();
  }
}

export class MarketManager__marketsResult {
  value0: Address;
  value1: Address;
  value2: Address;
  value3: string;
  value4: BigInt;
  value5: BigInt;
  value6: boolean;

  constructor(
    value0: Address,
    value1: Address,
    value2: Address,
    value3: string,
    value4: BigInt,
    value5: BigInt,
    value6: boolean
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    map.set("value3", ethereum.Value.fromString(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromBoolean(this.value6));
    return map;
  }

  getBondPool(): Address {
    return this.value0;
  }

  getLongZCB(): Address {
    return this.value1;
  }

  getShortZCB(): Address {
    return this.value2;
  }

  getDescription(): string {
    return this.value3;
  }

  getCreationTimestamp(): BigInt {
    return this.value4;
  }

  getResolutionTimestamp(): BigInt {
    return this.value5;
  }

  getIsPool(): boolean {
    return this.value6;
  }
}

export class MarketManager__parametersResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;
  value6: BigInt;
  value7: BigInt;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt,
    value6: BigInt,
    value7: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    map.set("value7", ethereum.Value.fromUnsignedBigInt(this.value7));
    return map;
  }

  getN(): BigInt {
    return this.value0;
  }

  getSigma(): BigInt {
    return this.value1;
  }

  getAlpha(): BigInt {
    return this.value2;
  }

  getOmega(): BigInt {
    return this.value3;
  }

  getDelta(): BigInt {
    return this.value4;
  }

  getR(): BigInt {
    return this.value5;
  }

  getS(): BigInt {
    return this.value6;
  }

  getSteak(): BigInt {
    return this.value7;
  }
}

export class MarketManager__redeemPoolLongZCBResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getCollateral_redeem_amount(): BigInt {
    return this.value0;
  }

  getSeniorAmount(): BigInt {
    return this.value1;
  }
}

export class MarketManager__restriction_dataResult {
  value0: boolean;
  value1: boolean;
  value2: boolean;
  value3: boolean;
  value4: boolean;
  value5: BigInt;

  constructor(
    value0: boolean,
    value1: boolean,
    value2: boolean,
    value3: boolean,
    value4: boolean,
    value5: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromBoolean(this.value1));
    map.set("value2", ethereum.Value.fromBoolean(this.value2));
    map.set("value3", ethereum.Value.fromBoolean(this.value3));
    map.set("value4", ethereum.Value.fromBoolean(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    return map;
  }

  getDuringAssessment(): boolean {
    return this.value0;
  }

  getOnlyReputable(): boolean {
    return this.value1;
  }

  getResolved(): boolean {
    return this.value2;
  }

  getAlive(): boolean {
    return this.value3;
  }

  getAtLoss(): boolean {
    return this.value4;
  }

  getBase_budget(): BigInt {
    return this.value5;
  }
}

export class MarketManager__sellBondResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getAmountIn(): BigInt {
    return this.value0;
  }

  getAmountOut(): BigInt {
    return this.value1;
  }
}

export class MarketManager__shortBondResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getAmountIn(): BigInt {
    return this.value0;
  }

  getAmountOut(): BigInt {
    return this.value1;
  }
}

export class MarketManager extends ethereum.SmartContract {
  static bind(address: Address): MarketManager {
    return new MarketManager("MarketManager", address);
  }

  buyBond(
    _marketId: BigInt,
    _amountIn: BigInt,
    _priceLimit: BigInt,
    _tradeRequestData: Bytes
  ): MarketManager__buyBondResult {
    let result = super.call(
      "buyBond",
      "buyBond(uint256,int256,uint256,bytes):(uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_marketId),
        ethereum.Value.fromSignedBigInt(_amountIn),
        ethereum.Value.fromUnsignedBigInt(_priceLimit),
        ethereum.Value.fromBytes(_tradeRequestData)
      ]
    );

    return new MarketManager__buyBondResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_buyBond(
    _marketId: BigInt,
    _amountIn: BigInt,
    _priceLimit: BigInt,
    _tradeRequestData: Bytes
  ): ethereum.CallResult<MarketManager__buyBondResult> {
    let result = super.tryCall(
      "buyBond",
      "buyBond(uint256,int256,uint256,bytes):(uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_marketId),
        ethereum.Value.fromSignedBigInt(_amountIn),
        ethereum.Value.fromUnsignedBigInt(_priceLimit),
        ethereum.Value.fromBytes(_tradeRequestData)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new MarketManager__buyBondResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }

  buyBondLevered(
    _marketId: BigInt,
    _amountIn: BigInt,
    _priceLimit: BigInt,
    _leverage: BigInt
  ): MarketManager__buyBondLeveredResult {
    let result = super.call(
      "buyBondLevered",
      "buyBondLevered(uint256,uint256,uint256,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_marketId),
        ethereum.Value.fromUnsignedBigInt(_amountIn),
        ethereum.Value.fromUnsignedBigInt(_priceLimit),
        ethereum.Value.fromUnsignedBigInt(_leverage)
      ]
    );

    return new MarketManager__buyBondLeveredResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_buyBondLevered(
    _marketId: BigInt,
    _amountIn: BigInt,
    _priceLimit: BigInt,
    _leverage: BigInt
  ): ethereum.CallResult<MarketManager__buyBondLeveredResult> {
    let result = super.tryCall(
      "buyBondLevered",
      "buyBondLevered(uint256,uint256,uint256,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_marketId),
        ethereum.Value.fromUnsignedBigInt(_amountIn),
        ethereum.Value.fromUnsignedBigInt(_priceLimit),
        ethereum.Value.fromUnsignedBigInt(_leverage)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new MarketManager__buyBondLeveredResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  claimFunnel(marketId: BigInt, point: i32, funnel: BigInt): BigInt {
    let result = super.call(
      "claimFunnel",
      "claimFunnel(uint256,uint16,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(marketId),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(point)),
        ethereum.Value.fromUnsignedBigInt(funnel)
      ]
    );

    return result[0].toBigInt();
  }

  try_claimFunnel(
    marketId: BigInt,
    point: i32,
    funnel: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "claimFunnel",
      "claimFunnel(uint256,uint16,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(marketId),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(point)),
        ethereum.Value.fromUnsignedBigInt(funnel)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  coverBondShort(
    _marketId: BigInt,
    _amountIn: BigInt,
    _priceLimit: BigInt,
    _tradeRequestData: Bytes
  ): MarketManager__coverBondShortResult {
    let result = super.call(
      "coverBondShort",
      "coverBondShort(uint256,uint256,uint256,bytes):(uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_marketId),
        ethereum.Value.fromUnsignedBigInt(_amountIn),
        ethereum.Value.fromUnsignedBigInt(_priceLimit),
        ethereum.Value.fromBytes(_tradeRequestData)
      ]
    );

    return new MarketManager__coverBondShortResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_coverBondShort(
    _marketId: BigInt,
    _amountIn: BigInt,
    _priceLimit: BigInt,
    _tradeRequestData: Bytes
  ): ethereum.CallResult<MarketManager__coverBondShortResult> {
    let result = super.tryCall(
      "coverBondShort",
      "coverBondShort(uint256,uint256,uint256,bytes):(uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_marketId),
        ethereum.Value.fromUnsignedBigInt(_amountIn),
        ethereum.Value.fromUnsignedBigInt(_priceLimit),
        ethereum.Value.fromBytes(_tradeRequestData)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new MarketManager__coverBondShortResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  getCurrentMarketPhase(marketId: BigInt): BigInt {
    let result = super.call(
      "getCurrentMarketPhase",
      "getCurrentMarketPhase(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(marketId)]
    );

    return result[0].toBigInt();
  }

  try_getCurrentMarketPhase(marketId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getCurrentMarketPhase",
      "getCurrentMarketPhase(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(marketId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getMarket(_id: BigInt): MarketManager__getMarketResultValue0Struct {
    let result = super.call(
      "getMarket",
      "getMarket(uint256):((address,address,address,string,uint256,uint256,bool))",
      [ethereum.Value.fromUnsignedBigInt(_id)]
    );

    return changetype<MarketManager__getMarketResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getMarket(
    _id: BigInt
  ): ethereum.CallResult<MarketManager__getMarketResultValue0Struct> {
    let result = super.tryCall(
      "getMarket",
      "getMarket(uint256):((address,address,address,string,uint256,uint256,bool))",
      [ethereum.Value.fromUnsignedBigInt(_id)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<MarketManager__getMarketResultValue0Struct>(value[0].toTuple())
    );
  }

  getMaxLeverage(manager: Address): BigInt {
    let result = super.call(
      "getMaxLeverage",
      "getMaxLeverage(address):(uint256)",
      [ethereum.Value.fromAddress(manager)]
    );

    return result[0].toBigInt();
  }

  try_getMaxLeverage(manager: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getMaxLeverage",
      "getMaxLeverage(address):(uint256)",
      [ethereum.Value.fromAddress(manager)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getParameters(
    marketId: BigInt
  ): MarketManager__getParametersResultValue0Struct {
    let result = super.call(
      "getParameters",
      "getParameters(uint256):((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
      [ethereum.Value.fromUnsignedBigInt(marketId)]
    );

    return changetype<MarketManager__getParametersResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getParameters(
    marketId: BigInt
  ): ethereum.CallResult<MarketManager__getParametersResultValue0Struct> {
    let result = super.tryCall(
      "getParameters",
      "getParameters(uint256):((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
      [ethereum.Value.fromUnsignedBigInt(marketId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<MarketManager__getParametersResultValue0Struct>(
        value[0].toTuple()
      )
    );
  }

  getPhaseData(
    marketId: BigInt
  ): MarketManager__getPhaseDataResultValue0Struct {
    let result = super.call(
      "getPhaseData",
      "getPhaseData(uint256):((bool,bool,bool,bool,bool,uint256))",
      [ethereum.Value.fromUnsignedBigInt(marketId)]
    );

    return changetype<MarketManager__getPhaseDataResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getPhaseData(
    marketId: BigInt
  ): ethereum.CallResult<MarketManager__getPhaseDataResultValue0Struct> {
    let result = super.tryCall(
      "getPhaseData",
      "getPhaseData(uint256):((bool,bool,bool,bool,bool,uint256))",
      [ethereum.Value.fromUnsignedBigInt(marketId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<MarketManager__getPhaseDataResultValue0Struct>(
        value[0].toTuple()
      )
    );
  }

  getPool(marketId: BigInt): Address {
    let result = super.call("getPool", "getPool(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(marketId)
    ]);

    return result[0].toAddress();
  }

  try_getPool(marketId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("getPool", "getPool(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(marketId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getShortZCB(marketId: BigInt): Address {
    let result = super.call("getShortZCB", "getShortZCB(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(marketId)
    ]);

    return result[0].toAddress();
  }

  try_getShortZCB(marketId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getShortZCB",
      "getShortZCB(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(marketId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getTraderBudget(marketId: BigInt, trader: Address): BigInt {
    let result = super.call(
      "getTraderBudget",
      "getTraderBudget(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(marketId),
        ethereum.Value.fromAddress(trader)
      ]
    );

    return result[0].toBigInt();
  }

  try_getTraderBudget(
    marketId: BigInt,
    trader: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTraderBudget",
      "getTraderBudget(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(marketId),
        ethereum.Value.fromAddress(trader)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getZCB(marketId: BigInt): Address {
    let result = super.call("getZCB", "getZCB(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(marketId)
    ]);

    return result[0].toAddress();
  }

  try_getZCB(marketId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("getZCB", "getZCB(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(marketId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isMarketApproved(marketId: BigInt): boolean {
    let result = super.call(
      "isMarketApproved",
      "isMarketApproved(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(marketId)]
    );

    return result[0].toBoolean();
  }

  try_isMarketApproved(marketId: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isMarketApproved",
      "isMarketApproved(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(marketId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  issuePoolBond(_marketId: BigInt, _amountIn: BigInt): BigInt {
    let result = super.call(
      "issuePoolBond",
      "issuePoolBond(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_marketId),
        ethereum.Value.fromUnsignedBigInt(_amountIn)
      ]
    );

    return result[0].toBigInt();
  }

  try_issuePoolBond(
    _marketId: BigInt,
    _amountIn: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "issuePoolBond",
      "issuePoolBond(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_marketId),
        ethereum.Value.fromUnsignedBigInt(_amountIn)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  leveragePosition(
    param0: BigInt,
    param1: Address
  ): MarketManager__leveragePositionResult {
    let result = super.call(
      "leveragePosition",
      "leveragePosition(uint256,address):(uint128,uint128)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromAddress(param1)
      ]
    );

    return new MarketManager__leveragePositionResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_leveragePosition(
    param0: BigInt,
    param1: Address
  ): ethereum.CallResult<MarketManager__leveragePositionResult> {
    let result = super.tryCall(
      "leveragePosition",
      "leveragePosition(uint256,address):(uint128,uint128)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromAddress(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new MarketManager__leveragePositionResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  loggedCollaterals(param0: BigInt): BigInt {
    let result = super.call(
      "loggedCollaterals",
      "loggedCollaterals(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBigInt();
  }

  try_loggedCollaterals(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "loggedCollaterals",
      "loggedCollaterals(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  longTrades(param0: BigInt, param1: Address): BigInt {
    let result = super.call(
      "longTrades",
      "longTrades(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromAddress(param1)
      ]
    );

    return result[0].toBigInt();
  }

  try_longTrades(param0: BigInt, param1: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "longTrades",
      "longTrades(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromAddress(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  makeEmptyMarketData(): MarketManager__makeEmptyMarketDataResultValue0Struct {
    let result = super.call(
      "makeEmptyMarketData",
      "makeEmptyMarketData():((address,address,address,string,uint256,uint256,bool))",
      []
    );

    return changetype<MarketManager__makeEmptyMarketDataResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_makeEmptyMarketData(): ethereum.CallResult<
    MarketManager__makeEmptyMarketDataResultValue0Struct
  > {
    let result = super.tryCall(
      "makeEmptyMarketData",
      "makeEmptyMarketData():((address,address,address,string,uint256,uint256,bool))",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<MarketManager__makeEmptyMarketDataResultValue0Struct>(
        value[0].toTuple()
      )
    );
  }

  marketCount(): BigInt {
    let result = super.call("marketCount", "marketCount():(uint256)", []);

    return result[0].toBigInt();
  }

  try_marketCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("marketCount", "marketCount():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  markets(param0: BigInt): MarketManager__marketsResult {
    let result = super.call(
      "markets",
      "markets(uint256):(address,address,address,string,uint256,uint256,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new MarketManager__marketsResult(
      result[0].toAddress(),
      result[1].toAddress(),
      result[2].toAddress(),
      result[3].toString(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toBoolean()
    );
  }

  try_markets(
    param0: BigInt
  ): ethereum.CallResult<MarketManager__marketsResult> {
    let result = super.tryCall(
      "markets",
      "markets(uint256):(address,address,address,string,uint256,uint256,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new MarketManager__marketsResult(
        value[0].toAddress(),
        value[1].toAddress(),
        value[2].toAddress(),
        value[3].toString(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toBoolean()
      )
    );
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  parameters(param0: BigInt): MarketManager__parametersResult {
    let result = super.call(
      "parameters",
      "parameters(uint256):(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new MarketManager__parametersResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toBigInt(),
      result[7].toBigInt()
    );
  }

  try_parameters(
    param0: BigInt
  ): ethereum.CallResult<MarketManager__parametersResult> {
    let result = super.tryCall(
      "parameters",
      "parameters(uint256):(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new MarketManager__parametersResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toBigInt(),
        value[7].toBigInt()
      )
    );
  }

  queuedRepThreshold(): i32 {
    let result = super.call(
      "queuedRepThreshold",
      "queuedRepThreshold():(uint8)",
      []
    );

    return result[0].toI32();
  }

  try_queuedRepThreshold(): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "queuedRepThreshold",
      "queuedRepThreshold():(uint8)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  queuedRepUpdates(param0: Address): i32 {
    let result = super.call(
      "queuedRepUpdates",
      "queuedRepUpdates(address):(uint8)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toI32();
  }

  try_queuedRepUpdates(param0: Address): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "queuedRepUpdates",
      "queuedRepUpdates(address):(uint8)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  redeem(marketId: BigInt): BigInt {
    let result = super.call("redeem", "redeem(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(marketId)
    ]);

    return result[0].toBigInt();
  }

  try_redeem(marketId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("redeem", "redeem(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(marketId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  redeemDeniedLeveredBond(marketId: BigInt): BigInt {
    let result = super.call(
      "redeemDeniedLeveredBond",
      "redeemDeniedLeveredBond(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(marketId)]
    );

    return result[0].toBigInt();
  }

  try_redeemDeniedLeveredBond(marketId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "redeemDeniedLeveredBond",
      "redeemDeniedLeveredBond(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(marketId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  redeemPoolLongZCB(
    marketId: BigInt,
    redeemAmount: BigInt
  ): MarketManager__redeemPoolLongZCBResult {
    let result = super.call(
      "redeemPoolLongZCB",
      "redeemPoolLongZCB(uint256,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(marketId),
        ethereum.Value.fromUnsignedBigInt(redeemAmount)
      ]
    );

    return new MarketManager__redeemPoolLongZCBResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_redeemPoolLongZCB(
    marketId: BigInt,
    redeemAmount: BigInt
  ): ethereum.CallResult<MarketManager__redeemPoolLongZCBResult> {
    let result = super.tryCall(
      "redeemPoolLongZCB",
      "redeemPoolLongZCB(uint256,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(marketId),
        ethereum.Value.fromUnsignedBigInt(redeemAmount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new MarketManager__redeemPoolLongZCBResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  redeemShortZCB(marketId: BigInt): BigInt {
    let result = super.call(
      "redeemShortZCB",
      "redeemShortZCB(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(marketId)]
    );

    return result[0].toBigInt();
  }

  try_redeemShortZCB(marketId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "redeemShortZCB",
      "redeemShortZCB(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(marketId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  redemption_prices(param0: BigInt): BigInt {
    let result = super.call(
      "redemption_prices",
      "redemption_prices(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBigInt();
  }

  try_redemption_prices(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "redemption_prices",
      "redemption_prices(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  restriction_data(param0: BigInt): MarketManager__restriction_dataResult {
    let result = super.call(
      "restriction_data",
      "restriction_data(uint256):(bool,bool,bool,bool,bool,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new MarketManager__restriction_dataResult(
      result[0].toBoolean(),
      result[1].toBoolean(),
      result[2].toBoolean(),
      result[3].toBoolean(),
      result[4].toBoolean(),
      result[5].toBigInt()
    );
  }

  try_restriction_data(
    param0: BigInt
  ): ethereum.CallResult<MarketManager__restriction_dataResult> {
    let result = super.tryCall(
      "restriction_data",
      "restriction_data(uint256):(bool,bool,bool,bool,bool,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new MarketManager__restriction_dataResult(
        value[0].toBoolean(),
        value[1].toBoolean(),
        value[2].toBoolean(),
        value[3].toBoolean(),
        value[4].toBoolean(),
        value[5].toBigInt()
      )
    );
  }

  sellBond(
    _marketId: BigInt,
    _amountIn: BigInt,
    _priceLimit: BigInt,
    _tradeRequestData: Bytes
  ): MarketManager__sellBondResult {
    let result = super.call(
      "sellBond",
      "sellBond(uint256,uint256,uint256,bytes):(uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_marketId),
        ethereum.Value.fromUnsignedBigInt(_amountIn),
        ethereum.Value.fromUnsignedBigInt(_priceLimit),
        ethereum.Value.fromBytes(_tradeRequestData)
      ]
    );

    return new MarketManager__sellBondResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_sellBond(
    _marketId: BigInt,
    _amountIn: BigInt,
    _priceLimit: BigInt,
    _tradeRequestData: Bytes
  ): ethereum.CallResult<MarketManager__sellBondResult> {
    let result = super.tryCall(
      "sellBond",
      "sellBond(uint256,uint256,uint256,bytes):(uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_marketId),
        ethereum.Value.fromUnsignedBigInt(_amountIn),
        ethereum.Value.fromUnsignedBigInt(_priceLimit),
        ethereum.Value.fromBytes(_tradeRequestData)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new MarketManager__sellBondResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  shortBond(
    _marketId: BigInt,
    _amountIn: BigInt,
    _priceLimit: BigInt,
    _tradeRequestData: Bytes
  ): MarketManager__shortBondResult {
    let result = super.call(
      "shortBond",
      "shortBond(uint256,uint256,uint256,bytes):(uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_marketId),
        ethereum.Value.fromUnsignedBigInt(_amountIn),
        ethereum.Value.fromUnsignedBigInt(_priceLimit),
        ethereum.Value.fromBytes(_tradeRequestData)
      ]
    );

    return new MarketManager__shortBondResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_shortBond(
    _marketId: BigInt,
    _amountIn: BigInt,
    _priceLimit: BigInt,
    _tradeRequestData: Bytes
  ): ethereum.CallResult<MarketManager__shortBondResult> {
    let result = super.tryCall(
      "shortBond",
      "shortBond(uint256,uint256,uint256,bytes):(uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_marketId),
        ethereum.Value.fromUnsignedBigInt(_amountIn),
        ethereum.Value.fromUnsignedBigInt(_priceLimit),
        ethereum.Value.fromBytes(_tradeRequestData)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new MarketManager__shortBondResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  shortTrades(param0: BigInt, param1: Address): BigInt {
    let result = super.call(
      "shortTrades",
      "shortTrades(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromAddress(param1)
      ]
    );

    return result[0].toBigInt();
  }

  try_shortTrades(
    param0: BigInt,
    param1: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "shortTrades",
      "shortTrades(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromAddress(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _creator_address(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _controllerAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _vrfCoordinator(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _keyHash(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }

  get _subscriptionId(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ApproveMarketCall extends ethereum.Call {
  get inputs(): ApproveMarketCall__Inputs {
    return new ApproveMarketCall__Inputs(this);
  }

  get outputs(): ApproveMarketCall__Outputs {
    return new ApproveMarketCall__Outputs(this);
  }
}

export class ApproveMarketCall__Inputs {
  _call: ApproveMarketCall;

  constructor(call: ApproveMarketCall) {
    this._call = call;
  }

  get marketId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ApproveMarketCall__Outputs {
  _call: ApproveMarketCall;

  constructor(call: ApproveMarketCall) {
    this._call = call;
  }
}

export class BuyBondCall extends ethereum.Call {
  get inputs(): BuyBondCall__Inputs {
    return new BuyBondCall__Inputs(this);
  }

  get outputs(): BuyBondCall__Outputs {
    return new BuyBondCall__Outputs(this);
  }
}

export class BuyBondCall__Inputs {
  _call: BuyBondCall;

  constructor(call: BuyBondCall) {
    this._call = call;
  }

  get _marketId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _amountIn(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _priceLimit(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _tradeRequestData(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class BuyBondCall__Outputs {
  _call: BuyBondCall;

  constructor(call: BuyBondCall) {
    this._call = call;
  }

  get amountIn(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get amountOut(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class BuyBondLeveredCall extends ethereum.Call {
  get inputs(): BuyBondLeveredCall__Inputs {
    return new BuyBondLeveredCall__Inputs(this);
  }

  get outputs(): BuyBondLeveredCall__Outputs {
    return new BuyBondLeveredCall__Outputs(this);
  }
}

export class BuyBondLeveredCall__Inputs {
  _call: BuyBondLeveredCall;

  constructor(call: BuyBondLeveredCall) {
    this._call = call;
  }

  get _marketId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _amountIn(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _priceLimit(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _leverage(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class BuyBondLeveredCall__Outputs {
  _call: BuyBondLeveredCall;

  constructor(call: BuyBondLeveredCall) {
    this._call = call;
  }

  get amountIn(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get amountOut(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class ClaimFunnelCall extends ethereum.Call {
  get inputs(): ClaimFunnelCall__Inputs {
    return new ClaimFunnelCall__Inputs(this);
  }

  get outputs(): ClaimFunnelCall__Outputs {
    return new ClaimFunnelCall__Outputs(this);
  }
}

export class ClaimFunnelCall__Inputs {
  _call: ClaimFunnelCall;

  constructor(call: ClaimFunnelCall) {
    this._call = call;
  }

  get marketId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get point(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get funnel(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class ClaimFunnelCall__Outputs {
  _call: ClaimFunnelCall;

  constructor(call: ClaimFunnelCall) {
    this._call = call;
  }

  get claimedAmount(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class CoverBondShortCall extends ethereum.Call {
  get inputs(): CoverBondShortCall__Inputs {
    return new CoverBondShortCall__Inputs(this);
  }

  get outputs(): CoverBondShortCall__Outputs {
    return new CoverBondShortCall__Outputs(this);
  }
}

export class CoverBondShortCall__Inputs {
  _call: CoverBondShortCall;

  constructor(call: CoverBondShortCall) {
    this._call = call;
  }

  get _marketId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _amountIn(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _priceLimit(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _tradeRequestData(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class CoverBondShortCall__Outputs {
  _call: CoverBondShortCall;

  constructor(call: CoverBondShortCall) {
    this._call = call;
  }

  get amountIn(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get amountOut(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class DeactivateMarketCall extends ethereum.Call {
  get inputs(): DeactivateMarketCall__Inputs {
    return new DeactivateMarketCall__Inputs(this);
  }

  get outputs(): DeactivateMarketCall__Outputs {
    return new DeactivateMarketCall__Outputs(this);
  }
}

export class DeactivateMarketCall__Inputs {
  _call: DeactivateMarketCall;

  constructor(call: DeactivateMarketCall) {
    this._call = call;
  }

  get marketId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get atLoss(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }

  get resolve(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }

  get rp(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class DeactivateMarketCall__Outputs {
  _call: DeactivateMarketCall;

  constructor(call: DeactivateMarketCall) {
    this._call = call;
  }
}

export class DenyMarketCall extends ethereum.Call {
  get inputs(): DenyMarketCall__Inputs {
    return new DenyMarketCall__Inputs(this);
  }

  get outputs(): DenyMarketCall__Outputs {
    return new DenyMarketCall__Outputs(this);
  }
}

export class DenyMarketCall__Inputs {
  _call: DenyMarketCall;

  constructor(call: DenyMarketCall) {
    this._call = call;
  }

  get marketId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class DenyMarketCall__Outputs {
  _call: DenyMarketCall;

  constructor(call: DenyMarketCall) {
    this._call = call;
  }
}

export class IssuePoolBondCall extends ethereum.Call {
  get inputs(): IssuePoolBondCall__Inputs {
    return new IssuePoolBondCall__Inputs(this);
  }

  get outputs(): IssuePoolBondCall__Outputs {
    return new IssuePoolBondCall__Outputs(this);
  }
}

export class IssuePoolBondCall__Inputs {
  _call: IssuePoolBondCall;

  constructor(call: IssuePoolBondCall) {
    this._call = call;
  }

  get _marketId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _amountIn(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class IssuePoolBondCall__Outputs {
  _call: IssuePoolBondCall;

  constructor(call: IssuePoolBondCall) {
    this._call = call;
  }

  get issueQTY(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class NewMarketCall extends ethereum.Call {
  get inputs(): NewMarketCall__Inputs {
    return new NewMarketCall__Inputs(this);
  }

  get outputs(): NewMarketCall__Outputs {
    return new NewMarketCall__Outputs(this);
  }
}

export class NewMarketCall__Inputs {
  _call: NewMarketCall;

  constructor(call: NewMarketCall) {
    this._call = call;
  }

  get marketId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get bondPool(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _longZCB(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _shortZCB(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _description(): string {
    return this._call.inputValues[4].value.toString();
  }

  get isPool(): boolean {
    return this._call.inputValues[5].value.toBoolean();
  }
}

export class NewMarketCall__Outputs {
  _call: NewMarketCall;

  constructor(call: NewMarketCall) {
    this._call = call;
  }
}

export class RedeemCall extends ethereum.Call {
  get inputs(): RedeemCall__Inputs {
    return new RedeemCall__Inputs(this);
  }

  get outputs(): RedeemCall__Outputs {
    return new RedeemCall__Outputs(this);
  }
}

export class RedeemCall__Inputs {
  _call: RedeemCall;

  constructor(call: RedeemCall) {
    this._call = call;
  }

  get marketId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class RedeemCall__Outputs {
  _call: RedeemCall;

  constructor(call: RedeemCall) {
    this._call = call;
  }

  get collateral_redeem_amount(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class RedeemDeniedLeveredBondCall extends ethereum.Call {
  get inputs(): RedeemDeniedLeveredBondCall__Inputs {
    return new RedeemDeniedLeveredBondCall__Inputs(this);
  }

  get outputs(): RedeemDeniedLeveredBondCall__Outputs {
    return new RedeemDeniedLeveredBondCall__Outputs(this);
  }
}

export class RedeemDeniedLeveredBondCall__Inputs {
  _call: RedeemDeniedLeveredBondCall;

  constructor(call: RedeemDeniedLeveredBondCall) {
    this._call = call;
  }

  get marketId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class RedeemDeniedLeveredBondCall__Outputs {
  _call: RedeemDeniedLeveredBondCall;

  constructor(call: RedeemDeniedLeveredBondCall) {
    this._call = call;
  }

  get collateral_amount(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class RedeemDeniedMarketCall extends ethereum.Call {
  get inputs(): RedeemDeniedMarketCall__Inputs {
    return new RedeemDeniedMarketCall__Inputs(this);
  }

  get outputs(): RedeemDeniedMarketCall__Outputs {
    return new RedeemDeniedMarketCall__Outputs(this);
  }
}

export class RedeemDeniedMarketCall__Inputs {
  _call: RedeemDeniedMarketCall;

  constructor(call: RedeemDeniedMarketCall) {
    this._call = call;
  }

  get marketId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get isLong(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class RedeemDeniedMarketCall__Outputs {
  _call: RedeemDeniedMarketCall;

  constructor(call: RedeemDeniedMarketCall) {
    this._call = call;
  }
}

export class RedeemLeveredBondCall extends ethereum.Call {
  get inputs(): RedeemLeveredBondCall__Inputs {
    return new RedeemLeveredBondCall__Inputs(this);
  }

  get outputs(): RedeemLeveredBondCall__Outputs {
    return new RedeemLeveredBondCall__Outputs(this);
  }
}

export class RedeemLeveredBondCall__Inputs {
  _call: RedeemLeveredBondCall;

  constructor(call: RedeemLeveredBondCall) {
    this._call = call;
  }

  get marketId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class RedeemLeveredBondCall__Outputs {
  _call: RedeemLeveredBondCall;

  constructor(call: RedeemLeveredBondCall) {
    this._call = call;
  }
}

export class RedeemPoolLongZCBCall extends ethereum.Call {
  get inputs(): RedeemPoolLongZCBCall__Inputs {
    return new RedeemPoolLongZCBCall__Inputs(this);
  }

  get outputs(): RedeemPoolLongZCBCall__Outputs {
    return new RedeemPoolLongZCBCall__Outputs(this);
  }
}

export class RedeemPoolLongZCBCall__Inputs {
  _call: RedeemPoolLongZCBCall;

  constructor(call: RedeemPoolLongZCBCall) {
    this._call = call;
  }

  get marketId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get redeemAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class RedeemPoolLongZCBCall__Outputs {
  _call: RedeemPoolLongZCBCall;

  constructor(call: RedeemPoolLongZCBCall) {
    this._call = call;
  }

  get collateral_redeem_amount(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get seniorAmount(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class RedeemShortZCBCall extends ethereum.Call {
  get inputs(): RedeemShortZCBCall__Inputs {
    return new RedeemShortZCBCall__Inputs(this);
  }

  get outputs(): RedeemShortZCBCall__Outputs {
    return new RedeemShortZCBCall__Outputs(this);
  }
}

export class RedeemShortZCBCall__Inputs {
  _call: RedeemShortZCBCall;

  constructor(call: RedeemShortZCBCall) {
    this._call = call;
  }

  get marketId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class RedeemShortZCBCall__Outputs {
  _call: RedeemShortZCBCall;

  constructor(call: RedeemShortZCBCall) {
    this._call = call;
  }

  get collateral_redeem_amount(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class SellBondCall extends ethereum.Call {
  get inputs(): SellBondCall__Inputs {
    return new SellBondCall__Inputs(this);
  }

  get outputs(): SellBondCall__Outputs {
    return new SellBondCall__Outputs(this);
  }
}

export class SellBondCall__Inputs {
  _call: SellBondCall;

  constructor(call: SellBondCall) {
    this._call = call;
  }

  get _marketId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _amountIn(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _priceLimit(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _tradeRequestData(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SellBondCall__Outputs {
  _call: SellBondCall;

  constructor(call: SellBondCall) {
    this._call = call;
  }

  get amountIn(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get amountOut(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class SetParametersCall extends ethereum.Call {
  get inputs(): SetParametersCall__Inputs {
    return new SetParametersCall__Inputs(this);
  }

  get outputs(): SetParametersCall__Outputs {
    return new SetParametersCall__Outputs(this);
  }
}

export class SetParametersCall__Inputs {
  _call: SetParametersCall;

  constructor(call: SetParametersCall) {
    this._call = call;
  }

  get param(): SetParametersCallParamStruct {
    return changetype<SetParametersCallParamStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }

  get utilizationRate(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get marketId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SetParametersCall__Outputs {
  _call: SetParametersCall;

  constructor(call: SetParametersCall) {
    this._call = call;
  }
}

export class SetParametersCallParamStruct extends ethereum.Tuple {
  get N(): BigInt {
    return this[0].toBigInt();
  }

  get sigma(): BigInt {
    return this[1].toBigInt();
  }

  get alpha(): BigInt {
    return this[2].toBigInt();
  }

  get omega(): BigInt {
    return this[3].toBigInt();
  }

  get delta(): BigInt {
    return this[4].toBigInt();
  }

  get r(): BigInt {
    return this[5].toBigInt();
  }

  get s(): BigInt {
    return this[6].toBigInt();
  }

  get steak(): BigInt {
    return this[7].toBigInt();
  }
}

export class SetReputationManagerCall extends ethereum.Call {
  get inputs(): SetReputationManagerCall__Inputs {
    return new SetReputationManagerCall__Inputs(this);
  }

  get outputs(): SetReputationManagerCall__Outputs {
    return new SetReputationManagerCall__Outputs(this);
  }
}

export class SetReputationManagerCall__Inputs {
  _call: SetReputationManagerCall;

  constructor(call: SetReputationManagerCall) {
    this._call = call;
  }

  get _reputationManager(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetReputationManagerCall__Outputs {
  _call: SetReputationManagerCall;

  constructor(call: SetReputationManagerCall) {
    this._call = call;
  }
}

export class ShortBondCall extends ethereum.Call {
  get inputs(): ShortBondCall__Inputs {
    return new ShortBondCall__Inputs(this);
  }

  get outputs(): ShortBondCall__Outputs {
    return new ShortBondCall__Outputs(this);
  }
}

export class ShortBondCall__Inputs {
  _call: ShortBondCall;

  constructor(call: ShortBondCall) {
    this._call = call;
  }

  get _marketId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _amountIn(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _priceLimit(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _tradeRequestData(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class ShortBondCall__Outputs {
  _call: ShortBondCall;

  constructor(call: ShortBondCall) {
    this._call = call;
  }

  get amountIn(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get amountOut(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class TradeCallBackCall extends ethereum.Call {
  get inputs(): TradeCallBackCall__Inputs {
    return new TradeCallBackCall__Inputs(this);
  }

  get outputs(): TradeCallBackCall__Outputs {
    return new TradeCallBackCall__Outputs(this);
  }
}

export class TradeCallBackCall__Inputs {
  _call: TradeCallBackCall;

  constructor(call: TradeCallBackCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class TradeCallBackCall__Outputs {
  _call: TradeCallBackCall;

  constructor(call: TradeCallBackCall) {
    this._call = call;
  }
}

export class ValidatorApproveCall extends ethereum.Call {
  get inputs(): ValidatorApproveCall__Inputs {
    return new ValidatorApproveCall__Inputs(this);
  }

  get outputs(): ValidatorApproveCall__Outputs {
    return new ValidatorApproveCall__Outputs(this);
  }
}

export class ValidatorApproveCall__Inputs {
  _call: ValidatorApproveCall;

  constructor(call: ValidatorApproveCall) {
    this._call = call;
  }

  get marketId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get collateral_required(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get zcb_for_sale(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get validator(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class ValidatorApproveCall__Outputs {
  _call: ValidatorApproveCall;

  constructor(call: ValidatorApproveCall) {
    this._call = call;
  }
}
