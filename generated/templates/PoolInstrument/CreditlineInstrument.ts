// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class DepositCollateral extends ethereum.Event {
  get params(): DepositCollateral__Params {
    return new DepositCollateral__Params(this);
  }
}

export class DepositCollateral__Params {
  _event: DepositCollateral;

  constructor(event: DepositCollateral) {
    this._event = event;
  }

  get amount(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class Drawdown extends ethereum.Event {
  get params(): Drawdown__Params {
    return new Drawdown__Params(this);
  }
}

export class Drawdown__Params {
  _event: Drawdown;

  constructor(event: Drawdown) {
    this._event = event;
  }

  get amount(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class LiquidityTransfer extends ethereum.Event {
  get params(): LiquidityTransfer__Params {
    return new LiquidityTransfer__Params(this);
  }
}

export class LiquidityTransfer__Params {
  _event: LiquidityTransfer;

  constructor(event: LiquidityTransfer) {
    this._event = event;
  }

  get to(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class LiquidityTransferFrom extends ethereum.Event {
  get params(): LiquidityTransferFrom__Params {
    return new LiquidityTransferFrom__Params(this);
  }
}

export class LiquidityTransferFrom__Params {
  _event: LiquidityTransferFrom;

  constructor(event: LiquidityTransferFrom) {
    this._event = event;
  }

  get to(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Repay extends ethereum.Event {
  get params(): Repay__Params {
    return new Repay__Params(this);
  }
}

export class Repay__Params {
  _event: Repay;

  constructor(event: Repay) {
    this._event = event;
  }

  get amount(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class CreditlineInstrument__getApprovedBorrowConditionsResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getValue0(): BigInt {
    return this.value0;
  }

  getValue1(): BigInt {
    return this.value1;
  }
}

export class CreditlineInstrument__getRemainingOwedResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getValue0(): BigInt {
    return this.value0;
  }

  getValue1(): BigInt {
    return this.value1;
  }
}

export class CreditlineInstrument__liquidatePositionResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  get_liquidatedAmount(): BigInt {
    return this.value0;
  }

  get_loss(): BigInt {
    return this.value1;
  }
}

export class CreditlineInstrument__prepareWithdrawResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }

  get_profit(): BigInt {
    return this.value0;
  }

  get_loss(): BigInt {
    return this.value1;
  }

  get_debtPayment(): BigInt {
    return this.value2;
  }
}

export class CreditlineInstrument extends ethereum.SmartContract {
  static bind(address: Address): CreditlineInstrument {
    return new CreditlineInstrument("CreditlineInstrument", address);
  }

  Utilizer(): Address {
    let result = super.call("Utilizer", "Utilizer():(address)", []);

    return result[0].toAddress();
  }

  try_Utilizer(): ethereum.CallResult<Address> {
    let result = super.tryCall("Utilizer", "Utilizer():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  balanceOfUnderlying(user: Address): BigInt {
    let result = super.call(
      "balanceOfUnderlying",
      "balanceOfUnderlying(address):(uint256)",
      [ethereum.Value.fromAddress(user)]
    );

    return result[0].toBigInt();
  }

  try_balanceOfUnderlying(user: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "balanceOfUnderlying",
      "balanceOfUnderlying(address):(uint256)",
      [ethereum.Value.fromAddress(user)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  borrower(): Address {
    let result = super.call("borrower", "borrower():(address)", []);

    return result[0].toAddress();
  }

  try_borrower(): ethereum.CallResult<Address> {
    let result = super.tryCall("borrower", "borrower():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  collateral(): Address {
    let result = super.call("collateral", "collateral():(address)", []);

    return result[0].toAddress();
  }

  try_collateral(): ethereum.CallResult<Address> {
    let result = super.tryCall("collateral", "collateral():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  collateral_balance(): BigInt {
    let result = super.call(
      "collateral_balance",
      "collateral_balance():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_collateral_balance(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "collateral_balance",
      "collateral_balance():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  collateral_type(): i32 {
    let result = super.call("collateral_type", "collateral_type():(uint8)", []);

    return result[0].toI32();
  }

  try_collateral_type(): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "collateral_type",
      "collateral_type():(uint8)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  estimatedTotalAssets(): BigInt {
    let result = super.call(
      "estimatedTotalAssets",
      "estimatedTotalAssets():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_estimatedTotalAssets(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "estimatedTotalAssets",
      "estimatedTotalAssets():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getApprovedBorrowConditions(): CreditlineInstrument__getApprovedBorrowConditionsResult {
    let result = super.call(
      "getApprovedBorrowConditions",
      "getApprovedBorrowConditions():(uint256,uint256)",
      []
    );

    return new CreditlineInstrument__getApprovedBorrowConditionsResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_getApprovedBorrowConditions(): ethereum.CallResult<
    CreditlineInstrument__getApprovedBorrowConditionsResult
  > {
    let result = super.tryCall(
      "getApprovedBorrowConditions",
      "getApprovedBorrowConditions():(uint256,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new CreditlineInstrument__getApprovedBorrowConditionsResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  getCollateralRatio(): BigInt {
    let result = super.call(
      "getCollateralRatio",
      "getCollateralRatio():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getCollateralRatio(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getCollateralRatio",
      "getCollateralRatio():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getCurrentLoanStatus(): BigInt {
    let result = super.call(
      "getCurrentLoanStatus",
      "getCurrentLoanStatus():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getCurrentLoanStatus(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getCurrentLoanStatus",
      "getCurrentLoanStatus():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getMaturityBalance(): BigInt {
    let result = super.call(
      "getMaturityBalance",
      "getMaturityBalance():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getMaturityBalance(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getMaturityBalance",
      "getMaturityBalance():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getProxy(): Address {
    let result = super.call("getProxy", "getProxy():(address)", []);

    return result[0].toAddress();
  }

  try_getProxy(): ethereum.CallResult<Address> {
    let result = super.tryCall("getProxy", "getProxy():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getRemainingOwed(): CreditlineInstrument__getRemainingOwedResult {
    let result = super.call(
      "getRemainingOwed",
      "getRemainingOwed():(uint256,uint256)",
      []
    );

    return new CreditlineInstrument__getRemainingOwedResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_getRemainingOwed(): ethereum.CallResult<
    CreditlineInstrument__getRemainingOwedResult
  > {
    let result = super.tryCall(
      "getRemainingOwed",
      "getRemainingOwed():(uint256,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new CreditlineInstrument__getRemainingOwedResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  instrumentApprovalCondition(): boolean {
    let result = super.call(
      "instrumentApprovalCondition",
      "instrumentApprovalCondition():(bool)",
      []
    );

    return result[0].toBoolean();
  }

  try_instrumentApprovalCondition(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "instrumentApprovalCondition",
      "instrumentApprovalCondition():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  interestToRepay(): BigInt {
    let result = super.call(
      "interestToRepay",
      "interestToRepay():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_interestToRepay(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "interestToRepay",
      "interestToRepay():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isLiquid(amount: BigInt): boolean {
    let result = super.call("isLiquid", "isLiquid(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_isLiquid(amount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("isLiquid", "isLiquid(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isLiquidatable(collateral: Address): boolean {
    let result = super.call(
      "isLiquidatable",
      "isLiquidatable(address):(bool)",
      [ethereum.Value.fromAddress(collateral)]
    );

    return result[0].toBoolean();
  }

  try_isLiquidatable(collateral: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isLiquidatable",
      "isLiquidatable(address):(bool)",
      [ethereum.Value.fromAddress(collateral)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isLocked(): boolean {
    let result = super.call("isLocked", "isLocked():(bool)", []);

    return result[0].toBoolean();
  }

  try_isLocked(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isLocked", "isLocked():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  liquidateAllPositions(): BigInt {
    let result = super.call(
      "liquidateAllPositions",
      "liquidateAllPositions():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_liquidateAllPositions(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "liquidateAllPositions",
      "liquidateAllPositions():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  liquidatePosition(
    _amountNeeded: BigInt
  ): CreditlineInstrument__liquidatePositionResult {
    let result = super.call(
      "liquidatePosition",
      "liquidatePosition(uint256):(uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(_amountNeeded)]
    );

    return new CreditlineInstrument__liquidatePositionResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_liquidatePosition(
    _amountNeeded: BigInt
  ): ethereum.CallResult<CreditlineInstrument__liquidatePositionResult> {
    let result = super.tryCall(
      "liquidatePosition",
      "liquidatePosition(uint256):(uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(_amountNeeded)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new CreditlineInstrument__liquidatePositionResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  loanStatus(): i32 {
    let result = super.call("loanStatus", "loanStatus():(uint8)", []);

    return result[0].toI32();
  }

  try_loanStatus(): ethereum.CallResult<i32> {
    let result = super.tryCall("loanStatus", "loanStatus():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  oracle(): Address {
    let result = super.call("oracle", "oracle():(address)", []);

    return result[0].toAddress();
  }

  try_oracle(): ethereum.CallResult<Address> {
    let result = super.tryCall("oracle", "oracle():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  prepareWithdraw(): CreditlineInstrument__prepareWithdrawResult {
    let result = super.call(
      "prepareWithdraw",
      "prepareWithdraw():(uint256,uint256,uint256)",
      []
    );

    return new CreditlineInstrument__prepareWithdrawResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_prepareWithdraw(): ethereum.CallResult<
    CreditlineInstrument__prepareWithdrawResult
  > {
    let result = super.tryCall(
      "prepareWithdraw",
      "prepareWithdraw():(uint256,uint256,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new CreditlineInstrument__prepareWithdrawResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  readyForWithdrawal(): boolean {
    let result = super.call(
      "readyForWithdrawal",
      "readyForWithdrawal():(bool)",
      []
    );

    return result[0].toBoolean();
  }

  try_readyForWithdrawal(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "readyForWithdrawal",
      "readyForWithdrawal():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  redeemUnderlying(amount: BigInt): boolean {
    let result = super.call(
      "redeemUnderlying",
      "redeemUnderlying(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(amount)]
    );

    return result[0].toBoolean();
  }

  try_redeemUnderlying(amount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "redeemUnderlying",
      "redeemUnderlying(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(amount)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  underlying(): Address {
    let result = super.call("underlying", "underlying():(address)", []);

    return result[0].toAddress();
  }

  try_underlying(): ethereum.CallResult<Address> {
    let result = super.tryCall("underlying", "underlying():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  validators(param0: BigInt): Address {
    let result = super.call("validators", "validators(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_validators(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("validators", "validators(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  vault(): Address {
    let result = super.call("vault", "vault():(address)", []);

    return result[0].toAddress();
  }

  try_vault(): ethereum.CallResult<Address> {
    let result = super.tryCall("vault", "vault():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get vault(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _borrower(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _principal(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _notionalInterest(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _duration(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _faceValue(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get _collateral(): Address {
    return this._call.inputValues[6].value.toAddress();
  }

  get _oracle(): Address {
    return this._call.inputValues[7].value.toAddress();
  }

  get _collateral_balance(): BigInt {
    return this._call.inputValues[8].value.toBigInt();
  }

  get _collateral_type(): BigInt {
    return this._call.inputValues[9].value.toBigInt();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class BeginGracePeriodCall extends ethereum.Call {
  get inputs(): BeginGracePeriodCall__Inputs {
    return new BeginGracePeriodCall__Inputs(this);
  }

  get outputs(): BeginGracePeriodCall__Outputs {
    return new BeginGracePeriodCall__Outputs(this);
  }
}

export class BeginGracePeriodCall__Inputs {
  _call: BeginGracePeriodCall;

  constructor(call: BeginGracePeriodCall) {
    this._call = call;
  }
}

export class BeginGracePeriodCall__Outputs {
  _call: BeginGracePeriodCall;

  constructor(call: BeginGracePeriodCall) {
    this._call = call;
  }
}

export class DeclareDefaultCall extends ethereum.Call {
  get inputs(): DeclareDefaultCall__Inputs {
    return new DeclareDefaultCall__Inputs(this);
  }

  get outputs(): DeclareDefaultCall__Outputs {
    return new DeclareDefaultCall__Outputs(this);
  }
}

export class DeclareDefaultCall__Inputs {
  _call: DeclareDefaultCall;

  constructor(call: DeclareDefaultCall) {
    this._call = call;
  }
}

export class DeclareDefaultCall__Outputs {
  _call: DeclareDefaultCall;

  constructor(call: DeclareDefaultCall) {
    this._call = call;
  }
}

export class DepositCollateralCall extends ethereum.Call {
  get inputs(): DepositCollateralCall__Inputs {
    return new DepositCollateralCall__Inputs(this);
  }

  get outputs(): DepositCollateralCall__Outputs {
    return new DepositCollateralCall__Outputs(this);
  }
}

export class DepositCollateralCall__Inputs {
  _call: DepositCollateralCall;

  constructor(call: DepositCollateralCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class DepositCollateralCall__Outputs {
  _call: DepositCollateralCall;

  constructor(call: DepositCollateralCall) {
    this._call = call;
  }
}

export class DrawdownCall extends ethereum.Call {
  get inputs(): DrawdownCall__Inputs {
    return new DrawdownCall__Inputs(this);
  }

  get outputs(): DrawdownCall__Outputs {
    return new DrawdownCall__Outputs(this);
  }
}

export class DrawdownCall__Inputs {
  _call: DrawdownCall;

  constructor(call: DrawdownCall) {
    this._call = call;
  }
}

export class DrawdownCall__Outputs {
  _call: DrawdownCall;

  constructor(call: DrawdownCall) {
    this._call = call;
  }
}

export class LiquidateAllPositionsCall extends ethereum.Call {
  get inputs(): LiquidateAllPositionsCall__Inputs {
    return new LiquidateAllPositionsCall__Inputs(this);
  }

  get outputs(): LiquidateAllPositionsCall__Outputs {
    return new LiquidateAllPositionsCall__Outputs(this);
  }
}

export class LiquidateAllPositionsCall__Inputs {
  _call: LiquidateAllPositionsCall;

  constructor(call: LiquidateAllPositionsCall) {
    this._call = call;
  }
}

export class LiquidateAllPositionsCall__Outputs {
  _call: LiquidateAllPositionsCall;

  constructor(call: LiquidateAllPositionsCall) {
    this._call = call;
  }

  get _amountFreed(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class LiquidateOwnershipCall extends ethereum.Call {
  get inputs(): LiquidateOwnershipCall__Inputs {
    return new LiquidateOwnershipCall__Inputs(this);
  }

  get outputs(): LiquidateOwnershipCall__Outputs {
    return new LiquidateOwnershipCall__Outputs(this);
  }
}

export class LiquidateOwnershipCall__Inputs {
  _call: LiquidateOwnershipCall;

  constructor(call: LiquidateOwnershipCall) {
    this._call = call;
  }

  get buyer(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class LiquidateOwnershipCall__Outputs {
  _call: LiquidateOwnershipCall;

  constructor(call: LiquidateOwnershipCall) {
    this._call = call;
  }
}

export class LiquidatePositionCall extends ethereum.Call {
  get inputs(): LiquidatePositionCall__Inputs {
    return new LiquidatePositionCall__Inputs(this);
  }

  get outputs(): LiquidatePositionCall__Outputs {
    return new LiquidatePositionCall__Outputs(this);
  }
}

export class LiquidatePositionCall__Inputs {
  _call: LiquidatePositionCall;

  constructor(call: LiquidatePositionCall) {
    this._call = call;
  }

  get _amountNeeded(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class LiquidatePositionCall__Outputs {
  _call: LiquidatePositionCall;

  constructor(call: LiquidatePositionCall) {
    this._call = call;
  }

  get _liquidatedAmount(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get _loss(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class OnDefaultCall extends ethereum.Call {
  get inputs(): OnDefaultCall__Inputs {
    return new OnDefaultCall__Inputs(this);
  }

  get outputs(): OnDefaultCall__Outputs {
    return new OnDefaultCall__Outputs(this);
  }
}

export class OnDefaultCall__Inputs {
  _call: OnDefaultCall;

  constructor(call: OnDefaultCall) {
    this._call = call;
  }
}

export class OnDefaultCall__Outputs {
  _call: OnDefaultCall;

  constructor(call: OnDefaultCall) {
    this._call = call;
  }
}

export class OnMarketApprovalCall extends ethereum.Call {
  get inputs(): OnMarketApprovalCall__Inputs {
    return new OnMarketApprovalCall__Inputs(this);
  }

  get outputs(): OnMarketApprovalCall__Outputs {
    return new OnMarketApprovalCall__Outputs(this);
  }
}

export class OnMarketApprovalCall__Inputs {
  _call: OnMarketApprovalCall;

  constructor(call: OnMarketApprovalCall) {
    this._call = call;
  }

  get max_principal(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get quoted_yield(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class OnMarketApprovalCall__Outputs {
  _call: OnMarketApprovalCall;

  constructor(call: OnMarketApprovalCall) {
    this._call = call;
  }
}

export class OnMaturityCall extends ethereum.Call {
  get inputs(): OnMaturityCall__Inputs {
    return new OnMaturityCall__Inputs(this);
  }

  get outputs(): OnMaturityCall__Outputs {
    return new OnMaturityCall__Outputs(this);
  }
}

export class OnMaturityCall__Inputs {
  _call: OnMaturityCall;

  constructor(call: OnMaturityCall) {
    this._call = call;
  }
}

export class OnMaturityCall__Outputs {
  _call: OnMaturityCall;

  constructor(call: OnMaturityCall) {
    this._call = call;
  }
}

export class PrepareWithdrawCall extends ethereum.Call {
  get inputs(): PrepareWithdrawCall__Inputs {
    return new PrepareWithdrawCall__Inputs(this);
  }

  get outputs(): PrepareWithdrawCall__Outputs {
    return new PrepareWithdrawCall__Outputs(this);
  }
}

export class PrepareWithdrawCall__Inputs {
  _call: PrepareWithdrawCall;

  constructor(call: PrepareWithdrawCall) {
    this._call = call;
  }
}

export class PrepareWithdrawCall__Outputs {
  _call: PrepareWithdrawCall;

  constructor(call: PrepareWithdrawCall) {
    this._call = call;
  }

  get _profit(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get _loss(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }

  get _debtPayment(): BigInt {
    return this._call.outputValues[2].value.toBigInt();
  }
}

export class PullRawFundsCall extends ethereum.Call {
  get inputs(): PullRawFundsCall__Inputs {
    return new PullRawFundsCall__Inputs(this);
  }

  get outputs(): PullRawFundsCall__Outputs {
    return new PullRawFundsCall__Outputs(this);
  }
}

export class PullRawFundsCall__Inputs {
  _call: PullRawFundsCall;

  constructor(call: PullRawFundsCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class PullRawFundsCall__Outputs {
  _call: PullRawFundsCall;

  constructor(call: PullRawFundsCall) {
    this._call = call;
  }
}

export class PushCollateralToVaultCall extends ethereum.Call {
  get inputs(): PushCollateralToVaultCall__Inputs {
    return new PushCollateralToVaultCall__Inputs(this);
  }

  get outputs(): PushCollateralToVaultCall__Outputs {
    return new PushCollateralToVaultCall__Outputs(this);
  }
}

export class PushCollateralToVaultCall__Inputs {
  _call: PushCollateralToVaultCall;

  constructor(call: PushCollateralToVaultCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class PushCollateralToVaultCall__Outputs {
  _call: PushCollateralToVaultCall;

  constructor(call: PushCollateralToVaultCall) {
    this._call = call;
  }
}

export class RedeemUnderlyingCall extends ethereum.Call {
  get inputs(): RedeemUnderlyingCall__Inputs {
    return new RedeemUnderlyingCall__Inputs(this);
  }

  get outputs(): RedeemUnderlyingCall__Outputs {
    return new RedeemUnderlyingCall__Outputs(this);
  }
}

export class RedeemUnderlyingCall__Inputs {
  _call: RedeemUnderlyingCall;

  constructor(call: RedeemUnderlyingCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class RedeemUnderlyingCall__Outputs {
  _call: RedeemUnderlyingCall;

  constructor(call: RedeemUnderlyingCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class RepayCall extends ethereum.Call {
  get inputs(): RepayCall__Inputs {
    return new RepayCall__Inputs(this);
  }

  get outputs(): RepayCall__Outputs {
    return new RepayCall__Outputs(this);
  }
}

export class RepayCall__Inputs {
  _call: RepayCall;

  constructor(call: RepayCall) {
    this._call = call;
  }

  get _repay_amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class RepayCall__Outputs {
  _call: RepayCall;

  constructor(call: RepayCall) {
    this._call = call;
  }
}

export class SetGracePeriodCall extends ethereum.Call {
  get inputs(): SetGracePeriodCall__Inputs {
    return new SetGracePeriodCall__Inputs(this);
  }

  get outputs(): SetGracePeriodCall__Outputs {
    return new SetGracePeriodCall__Outputs(this);
  }
}

export class SetGracePeriodCall__Inputs {
  _call: SetGracePeriodCall;

  constructor(call: SetGracePeriodCall) {
    this._call = call;
  }
}

export class SetGracePeriodCall__Outputs {
  _call: SetGracePeriodCall;

  constructor(call: SetGracePeriodCall) {
    this._call = call;
  }
}

export class SetUtilizerCall extends ethereum.Call {
  get inputs(): SetUtilizerCall__Inputs {
    return new SetUtilizerCall__Inputs(this);
  }

  get outputs(): SetUtilizerCall__Outputs {
    return new SetUtilizerCall__Outputs(this);
  }
}

export class SetUtilizerCall__Inputs {
  _call: SetUtilizerCall;

  constructor(call: SetUtilizerCall) {
    this._call = call;
  }

  get _Utilizer(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetUtilizerCall__Outputs {
  _call: SetUtilizerCall;

  constructor(call: SetUtilizerCall) {
    this._call = call;
  }
}

export class SetVaultCall extends ethereum.Call {
  get inputs(): SetVaultCall__Inputs {
    return new SetVaultCall__Inputs(this);
  }

  get outputs(): SetVaultCall__Outputs {
    return new SetVaultCall__Outputs(this);
  }
}

export class SetVaultCall__Inputs {
  _call: SetVaultCall;

  constructor(call: SetVaultCall) {
    this._call = call;
  }

  get newVault(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetVaultCall__Outputs {
  _call: SetVaultCall;

  constructor(call: SetVaultCall) {
    this._call = call;
  }
}

export class Store_internal_balanceCall extends ethereum.Call {
  get inputs(): Store_internal_balanceCall__Inputs {
    return new Store_internal_balanceCall__Inputs(this);
  }

  get outputs(): Store_internal_balanceCall__Outputs {
    return new Store_internal_balanceCall__Outputs(this);
  }
}

export class Store_internal_balanceCall__Inputs {
  _call: Store_internal_balanceCall;

  constructor(call: Store_internal_balanceCall) {
    this._call = call;
  }
}

export class Store_internal_balanceCall__Outputs {
  _call: Store_internal_balanceCall;

  constructor(call: Store_internal_balanceCall) {
    this._call = call;
  }
}
