// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AddCollateral extends ethereum.Event {
  get params(): AddCollateral__Params {
    return new AddCollateral__Params(this);
  }
}

export class AddCollateral__Params {
  _event: AddCollateral;

  constructor(event: AddCollateral) {
    this._event = event;
  }

  get borrower(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get collateral(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get spender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class AuctionClosed extends ethereum.Event {
  get params(): AuctionClosed__Params {
    return new AuctionClosed__Params(this);
  }
}

export class AuctionClosed__Params {
  _event: AuctionClosed;

  constructor(event: AuctionClosed) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get borrower(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get collateral(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class AuctionCreated extends ethereum.Event {
  get params(): AuctionCreated__Params {
    return new AuctionCreated__Params(this);
  }
}

export class AuctionCreated__Params {
  _event: AuctionCreated;

  constructor(event: AuctionCreated) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get borrower(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get collateral(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Borrow extends ethereum.Event {
  get params(): Borrow__Params {
    return new Borrow__Params(this);
  }
}

export class Borrow__Params {
  _event: Borrow;

  constructor(event: Borrow) {
    this._event = event;
  }

  get _borrower(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get _shares(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class CollateralPurchased extends ethereum.Event {
  get params(): CollateralPurchased__Params {
    return new CollateralPurchased__Params(this);
  }
}

export class CollateralPurchased__Params {
  _event: CollateralPurchased;

  constructor(event: CollateralPurchased) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get buyer(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get collateral(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class Deposit extends ethereum.Event {
  get params(): Deposit__Params {
    return new Deposit__Params(this);
  }
}

export class Deposit__Params {
  _event: Deposit;

  constructor(event: Deposit) {
    this._event = event;
  }

  get caller(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get owner(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get assets(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get shares(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class InterestAdded extends ethereum.Event {
  get params(): InterestAdded__Params {
    return new InterestAdded__Params(this);
  }
}

export class InterestAdded__Params {
  _event: InterestAdded;

  constructor(event: InterestAdded) {
    this._event = event;
  }

  get timestamp(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get interestEarned(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get feesAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get feesShare(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get newRate(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class LiquidityTransfer extends ethereum.Event {
  get params(): LiquidityTransfer__Params {
    return new LiquidityTransfer__Params(this);
  }
}

export class LiquidityTransfer__Params {
  _event: LiquidityTransfer;

  constructor(event: LiquidityTransfer) {
    this._event = event;
  }

  get to(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class LiquidityTransferFrom extends ethereum.Event {
  get params(): LiquidityTransferFrom__Params {
    return new LiquidityTransferFrom__Params(this);
  }
}

export class LiquidityTransferFrom__Params {
  _event: LiquidityTransferFrom;

  constructor(event: LiquidityTransferFrom) {
    this._event = event;
  }

  get to(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class NewCollateralAdded extends ethereum.Event {
  get params(): NewCollateralAdded__Params {
    return new NewCollateralAdded__Params(this);
  }
}

export class NewCollateralAdded__Params {
  _event: NewCollateralAdded;

  constructor(event: NewCollateralAdded) {
    this._event = event;
  }

  get collateral(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get maxAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get maxBorrowAmount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get isERC20(): boolean {
    return this._event.parameters[4].value.toBoolean();
  }
}

export class Paused extends ethereum.Event {
  get params(): Paused__Params {
    return new Paused__Params(this);
  }
}

export class Paused__Params {
  _event: Paused;

  constructor(event: Paused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class RemoveCollateral extends ethereum.Event {
  get params(): RemoveCollateral__Params {
    return new RemoveCollateral__Params(this);
  }
}

export class RemoveCollateral__Params {
  _event: RemoveCollateral;

  constructor(event: RemoveCollateral) {
    this._event = event;
  }

  get borrower(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get collateral(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Repay extends ethereum.Event {
  get params(): Repay__Params {
    return new Repay__Params(this);
  }
}

export class Repay__Params {
  _event: Repay;

  constructor(event: Repay) {
    this._event = event;
  }

  get borrower(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get shares(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Unpaused extends ethereum.Event {
  get params(): Unpaused__Params {
    return new Unpaused__Params(this);
  }
}

export class Unpaused__Params {
  _event: Unpaused;

  constructor(event: Unpaused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Withdraw extends ethereum.Event {
  get params(): Withdraw__Params {
    return new Withdraw__Params(this);
  }
}

export class Withdraw__Params {
  _event: Withdraw;

  constructor(event: Withdraw) {
    this._event = event;
  }

  get caller(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get receiver(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get owner(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get assets(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get shares(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class PoolInstrument___isLiquidatableResult {
  value0: boolean;
  value1: BigInt;

  constructor(value0: boolean, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromSignedBigInt(this.value1));
    return map;
  }

  getValue0(): boolean {
    return this.value0;
  }

  getAccountLiq(): BigInt {
    return this.value1;
  }
}

export class PoolInstrument__addInterestResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt, value3: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    return map;
  }

  get_interestEarned(): BigInt {
    return this.value0;
  }

  get_feesAmount(): BigInt {
    return this.value1;
  }

  get_feesShare(): BigInt {
    return this.value2;
  }

  get_newRate(): BigInt {
    return this.value3;
  }
}

export class PoolInstrument__collateralDataResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: boolean;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt, value3: boolean) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromBoolean(this.value3));
    return map;
  }

  getTotalCollateral(): BigInt {
    return this.value0;
  }

  getMaxAmount(): BigInt {
    return this.value1;
  }

  getMaxBorrowAmount(): BigInt {
    return this.value2;
  }

  getIsERC20(): boolean {
    return this.value3;
  }
}

export class PoolInstrument__currentRateInfoResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }

  getLastBlock(): BigInt {
    return this.value0;
  }

  getLastTimestamp(): BigInt {
    return this.value1;
  }

  getRatePerSec(): BigInt {
    return this.value2;
  }
}

export class PoolInstrument__getAcceptedCollateralsResultValue0Struct extends ethereum.Tuple {
  get tokenAddress(): Address {
    return this[0].toAddress();
  }

  get tokenId(): BigInt {
    return this[1].toBigInt();
  }
}

export class PoolInstrument__getUserSnapshotResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromSignedBigInt(this.value4));
    return map;
  }

  get_userAssetShares(): BigInt {
    return this.value0;
  }

  get_userAssetAmount(): BigInt {
    return this.value1;
  }

  get_userBorrowShares(): BigInt {
    return this.value2;
  }

  get_userBorrowAmount(): BigInt {
    return this.value3;
  }

  get_userAccountLiquidity(): BigInt {
    return this.value4;
  }
}

export class PoolInstrument__liquidateResult_collateralStruct extends ethereum.Tuple {
  get tokenAddress(): Address {
    return this[0].toAddress();
  }

  get tokenId(): BigInt {
    return this[1].toBigInt();
  }
}

export class PoolInstrument__liquidateResult {
  value0: PoolInstrument__liquidateResult_collateralStruct;
  value1: BigInt;

  constructor(
    value0: PoolInstrument__liquidateResult_collateralStruct,
    value1: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromTuple(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  get_collateral(): PoolInstrument__liquidateResult_collateralStruct {
    return this.value0;
  }

  get_auctionId(): BigInt {
    return this.value1;
  }
}

export class PoolInstrument__liquidatePositionResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  get_liquidatedAmount(): BigInt {
    return this.value0;
  }

  get_loss(): BigInt {
    return this.value1;
  }
}

export class PoolInstrument__prepareWithdrawResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }

  get_profit(): BigInt {
    return this.value0;
  }

  get_loss(): BigInt {
    return this.value1;
  }

  get_debtPayment(): BigInt {
    return this.value2;
  }
}

export class PoolInstrument__totalAssetResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getAmount(): BigInt {
    return this.value0;
  }

  getShares(): BigInt {
    return this.value1;
  }
}

export class PoolInstrument__totalBorrowResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getAmount(): BigInt {
    return this.value0;
  }

  getShares(): BigInt {
    return this.value1;
  }
}

export class PoolInstrument extends ethereum.SmartContract {
  static bind(address: Address): PoolInstrument {
    return new PoolInstrument("PoolInstrument", address);
  }

  DOMAIN_SEPARATOR(): Bytes {
    let result = super.call(
      "DOMAIN_SEPARATOR",
      "DOMAIN_SEPARATOR():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_DOMAIN_SEPARATOR(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "DOMAIN_SEPARATOR",
      "DOMAIN_SEPARATOR():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  Utilizer(): Address {
    let result = super.call("Utilizer", "Utilizer():(address)", []);

    return result[0].toAddress();
  }

  try_Utilizer(): ethereum.CallResult<Address> {
    let result = super.tryCall("Utilizer", "Utilizer():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  _canBorrow(_borrower: Address): boolean {
    let result = super.call("_canBorrow", "_canBorrow(address):(bool)", [
      ethereum.Value.fromAddress(_borrower)
    ]);

    return result[0].toBoolean();
  }

  try__canBorrow(_borrower: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("_canBorrow", "_canBorrow(address):(bool)", [
      ethereum.Value.fromAddress(_borrower)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  _isLiquidatable(_borrower: Address): PoolInstrument___isLiquidatableResult {
    let result = super.call(
      "_isLiquidatable",
      "_isLiquidatable(address):(bool,int256)",
      [ethereum.Value.fromAddress(_borrower)]
    );

    return new PoolInstrument___isLiquidatableResult(
      result[0].toBoolean(),
      result[1].toBigInt()
    );
  }

  try__isLiquidatable(
    _borrower: Address
  ): ethereum.CallResult<PoolInstrument___isLiquidatableResult> {
    let result = super.tryCall(
      "_isLiquidatable",
      "_isLiquidatable(address):(bool,int256)",
      [ethereum.Value.fromAddress(_borrower)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new PoolInstrument___isLiquidatableResult(
        value[0].toBoolean(),
        value[1].toBigInt()
      )
    );
  }

  addInterest(): PoolInstrument__addInterestResult {
    let result = super.call(
      "addInterest",
      "addInterest():(uint256,uint256,uint256,uint64)",
      []
    );

    return new PoolInstrument__addInterestResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt()
    );
  }

  try_addInterest(): ethereum.CallResult<PoolInstrument__addInterestResult> {
    let result = super.tryCall(
      "addInterest",
      "addInterest():(uint256,uint256,uint256,uint64)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new PoolInstrument__addInterestResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt()
      )
    );
  }

  allowance(param0: Address, param1: Address): BigInt {
    let result = super.call(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );

    return result[0].toBigInt();
  }

  try_allowance(param0: Address, param1: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  approve(spender: Address, amount: BigInt): boolean {
    let result = super.call("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_approve(spender: Address, amount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  approvedCollateral(param0: Address, param1: BigInt): boolean {
    let result = super.call(
      "approvedCollateral",
      "approvedCollateral(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toBoolean();
  }

  try_approvedCollateral(
    param0: Address,
    param1: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "approvedCollateral",
      "approvedCollateral(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  asset(): Address {
    let result = super.call("asset", "asset():(address)", []);

    return result[0].toAddress();
  }

  try_asset(): ethereum.CallResult<Address> {
    let result = super.tryCall("asset", "asset():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  balanceOf(param0: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOfUnderlying(user: Address): BigInt {
    let result = super.call(
      "balanceOfUnderlying",
      "balanceOfUnderlying(address):(uint256)",
      [ethereum.Value.fromAddress(user)]
    );

    return result[0].toBigInt();
  }

  try_balanceOfUnderlying(user: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "balanceOfUnderlying",
      "balanceOfUnderlying(address):(uint256)",
      [ethereum.Value.fromAddress(user)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  borrow(
    _borrowAmount: BigInt,
    _collateral: Address,
    _tokenId: BigInt,
    _collateralAmount: BigInt,
    _reciever: Address
  ): BigInt {
    let result = super.call(
      "borrow",
      "borrow(uint256,address,uint256,uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_borrowAmount),
        ethereum.Value.fromAddress(_collateral),
        ethereum.Value.fromUnsignedBigInt(_tokenId),
        ethereum.Value.fromUnsignedBigInt(_collateralAmount),
        ethereum.Value.fromAddress(_reciever)
      ]
    );

    return result[0].toBigInt();
  }

  try_borrow(
    _borrowAmount: BigInt,
    _collateral: Address,
    _tokenId: BigInt,
    _collateralAmount: BigInt,
    _reciever: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "borrow",
      "borrow(uint256,address,uint256,uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_borrowAmount),
        ethereum.Value.fromAddress(_collateral),
        ethereum.Value.fromUnsignedBigInt(_tokenId),
        ethereum.Value.fromUnsignedBigInt(_collateralAmount),
        ethereum.Value.fromAddress(_reciever)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  borrowLiquidityAvailable(_borrowAmount: BigInt): boolean {
    let result = super.call(
      "borrowLiquidityAvailable",
      "borrowLiquidityAvailable(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(_borrowAmount)]
    );

    return result[0].toBoolean();
  }

  try_borrowLiquidityAvailable(
    _borrowAmount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "borrowLiquidityAvailable",
      "borrowLiquidityAvailable(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(_borrowAmount)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  collateralData(
    param0: Address,
    param1: BigInt
  ): PoolInstrument__collateralDataResult {
    let result = super.call(
      "collateralData",
      "collateralData(address,uint256):(uint256,uint256,uint256,bool)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return new PoolInstrument__collateralDataResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBoolean()
    );
  }

  try_collateralData(
    param0: Address,
    param1: BigInt
  ): ethereum.CallResult<PoolInstrument__collateralDataResult> {
    let result = super.tryCall(
      "collateralData",
      "collateralData(address,uint256):(uint256,uint256,uint256,bool)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new PoolInstrument__collateralDataResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBoolean()
      )
    );
  }

  convertToAssets(shares: BigInt): BigInt {
    let result = super.call(
      "convertToAssets",
      "convertToAssets(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(shares)]
    );

    return result[0].toBigInt();
  }

  try_convertToAssets(shares: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "convertToAssets",
      "convertToAssets(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(shares)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  convertToShares(assets: BigInt): BigInt {
    let result = super.call(
      "convertToShares",
      "convertToShares(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(assets)]
    );

    return result[0].toBigInt();
  }

  try_convertToShares(assets: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "convertToShares",
      "convertToShares(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(assets)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  currentRateInfo(): PoolInstrument__currentRateInfoResult {
    let result = super.call(
      "currentRateInfo",
      "currentRateInfo():(uint64,uint64,uint64)",
      []
    );

    return new PoolInstrument__currentRateInfoResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_currentRateInfo(): ethereum.CallResult<
    PoolInstrument__currentRateInfoResult
  > {
    let result = super.tryCall(
      "currentRateInfo",
      "currentRateInfo():(uint64,uint64,uint64)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new PoolInstrument__currentRateInfoResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  decimals(): i32 {
    let result = super.call("decimals", "decimals():(uint8)", []);

    return result[0].toI32();
  }

  try_decimals(): ethereum.CallResult<i32> {
    let result = super.tryCall("decimals", "decimals():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  deposit(assets: BigInt, receiver: Address): BigInt {
    let result = super.call("deposit", "deposit(uint256,address):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(assets),
      ethereum.Value.fromAddress(receiver)
    ]);

    return result[0].toBigInt();
  }

  try_deposit(assets: BigInt, receiver: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "deposit",
      "deposit(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(assets),
        ethereum.Value.fromAddress(receiver)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  estimatedTotalAssets(): BigInt {
    let result = super.call(
      "estimatedTotalAssets",
      "estimatedTotalAssets():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_estimatedTotalAssets(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "estimatedTotalAssets",
      "estimatedTotalAssets():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getAcceptedCollaterals(): Array<
    PoolInstrument__getAcceptedCollateralsResultValue0Struct
  > {
    let result = super.call(
      "getAcceptedCollaterals",
      "getAcceptedCollaterals():((address,uint256)[])",
      []
    );

    return result[0].toTupleArray<
      PoolInstrument__getAcceptedCollateralsResultValue0Struct
    >();
  }

  try_getAcceptedCollaterals(): ethereum.CallResult<
    Array<PoolInstrument__getAcceptedCollateralsResultValue0Struct>
  > {
    let result = super.tryCall(
      "getAcceptedCollaterals",
      "getAcceptedCollaterals():((address,uint256)[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<
        PoolInstrument__getAcceptedCollateralsResultValue0Struct
      >()
    );
  }

  getMaturityBalance(): BigInt {
    let result = super.call(
      "getMaturityBalance",
      "getMaturityBalance():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getMaturityBalance(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getMaturityBalance",
      "getMaturityBalance():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getMaxBorrow(_borrower: Address): BigInt {
    let result = super.call("getMaxBorrow", "getMaxBorrow(address):(uint256)", [
      ethereum.Value.fromAddress(_borrower)
    ]);

    return result[0].toBigInt();
  }

  try_getMaxBorrow(_borrower: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getMaxBorrow",
      "getMaxBorrow(address):(uint256)",
      [ethereum.Value.fromAddress(_borrower)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getUserSnapshot(_address: Address): PoolInstrument__getUserSnapshotResult {
    let result = super.call(
      "getUserSnapshot",
      "getUserSnapshot(address):(uint256,uint256,uint256,uint256,int256)",
      [ethereum.Value.fromAddress(_address)]
    );

    return new PoolInstrument__getUserSnapshotResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt()
    );
  }

  try_getUserSnapshot(
    _address: Address
  ): ethereum.CallResult<PoolInstrument__getUserSnapshotResult> {
    let result = super.tryCall(
      "getUserSnapshot",
      "getUserSnapshot(address):(uint256,uint256,uint256,uint256,int256)",
      [ethereum.Value.fromAddress(_address)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new PoolInstrument__getUserSnapshotResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt()
      )
    );
  }

  instrumentApprovalCondition(): boolean {
    let result = super.call(
      "instrumentApprovalCondition",
      "instrumentApprovalCondition():(bool)",
      []
    );

    return result[0].toBoolean();
  }

  try_instrumentApprovalCondition(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "instrumentApprovalCondition",
      "instrumentApprovalCondition():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isLiquid(amount: BigInt): boolean {
    let result = super.call("isLiquid", "isLiquid(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_isLiquid(amount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("isLiquid", "isLiquid(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isLocked(): boolean {
    let result = super.call("isLocked", "isLocked():(bool)", []);

    return result[0].toBoolean();
  }

  try_isLocked(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isLocked", "isLocked():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isWithdrawAble(holder: Address, amount: BigInt): boolean {
    let result = super.call(
      "isWithdrawAble",
      "isWithdrawAble(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(holder),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBoolean();
  }

  try_isWithdrawAble(
    holder: Address,
    amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isWithdrawAble",
      "isWithdrawAble(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(holder),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  liquidate(_borrower: Address): PoolInstrument__liquidateResult {
    let result = super.call(
      "liquidate",
      "liquidate(address):((address,uint256),uint256)",
      [ethereum.Value.fromAddress(_borrower)]
    );

    return changetype<PoolInstrument__liquidateResult>(
      new PoolInstrument__liquidateResult(
        changetype<PoolInstrument__liquidateResult_collateralStruct>(
          result[0].toTuple()
        ),
        result[1].toBigInt()
      )
    );
  }

  try_liquidate(
    _borrower: Address
  ): ethereum.CallResult<PoolInstrument__liquidateResult> {
    let result = super.tryCall(
      "liquidate",
      "liquidate(address):((address,uint256),uint256)",
      [ethereum.Value.fromAddress(_borrower)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<PoolInstrument__liquidateResult>(
        new PoolInstrument__liquidateResult(
          changetype<PoolInstrument__liquidateResult_collateralStruct>(
            value[0].toTuple()
          ),
          value[1].toBigInt()
        )
      )
    );
  }

  liquidateAllPositions(): BigInt {
    let result = super.call(
      "liquidateAllPositions",
      "liquidateAllPositions():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_liquidateAllPositions(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "liquidateAllPositions",
      "liquidateAllPositions():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  liquidatePosition(
    _amountNeeded: BigInt
  ): PoolInstrument__liquidatePositionResult {
    let result = super.call(
      "liquidatePosition",
      "liquidatePosition(uint256):(uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(_amountNeeded)]
    );

    return new PoolInstrument__liquidatePositionResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_liquidatePosition(
    _amountNeeded: BigInt
  ): ethereum.CallResult<PoolInstrument__liquidatePositionResult> {
    let result = super.tryCall(
      "liquidatePosition",
      "liquidatePosition(uint256):(uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(_amountNeeded)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new PoolInstrument__liquidatePositionResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  maxDeposit(param0: Address): BigInt {
    let result = super.call("maxDeposit", "maxDeposit(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_maxDeposit(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("maxDeposit", "maxDeposit(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  maxMint(param0: Address): BigInt {
    let result = super.call("maxMint", "maxMint(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_maxMint(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("maxMint", "maxMint(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  maxRedeem(owner: Address): BigInt {
    let result = super.call("maxRedeem", "maxRedeem(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);

    return result[0].toBigInt();
  }

  try_maxRedeem(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("maxRedeem", "maxRedeem(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  maxWithdraw(owner: Address): BigInt {
    let result = super.call("maxWithdraw", "maxWithdraw(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);

    return result[0].toBigInt();
  }

  try_maxWithdraw(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "maxWithdraw",
      "maxWithdraw(address):(uint256)",
      [ethereum.Value.fromAddress(owner)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  mint(shares: BigInt, receiver: Address): BigInt {
    let result = super.call("mint", "mint(uint256,address):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(shares),
      ethereum.Value.fromAddress(receiver)
    ]);

    return result[0].toBigInt();
  }

  try_mint(shares: BigInt, receiver: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("mint", "mint(uint256,address):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(shares),
      ethereum.Value.fromAddress(receiver)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  nonces(param0: Address): BigInt {
    let result = super.call("nonces", "nonces(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_nonces(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("nonces", "nonces(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  numAuctions(): BigInt {
    let result = super.call("numAuctions", "numAuctions():(uint256)", []);

    return result[0].toBigInt();
  }

  try_numAuctions(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("numAuctions", "numAuctions():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  onERC721Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: Bytes
  ): Bytes {
    let result = super.call(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromBytes(param3)
      ]
    );

    return result[0].toBytes();
  }

  try_onERC721Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromBytes(param3)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  paused(): boolean {
    let result = super.call("paused", "paused():(bool)", []);

    return result[0].toBoolean();
  }

  try_paused(): ethereum.CallResult<boolean> {
    let result = super.tryCall("paused", "paused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  prepareWithdraw(): PoolInstrument__prepareWithdrawResult {
    let result = super.call(
      "prepareWithdraw",
      "prepareWithdraw():(uint256,uint256,uint256)",
      []
    );

    return new PoolInstrument__prepareWithdrawResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_prepareWithdraw(): ethereum.CallResult<
    PoolInstrument__prepareWithdrawResult
  > {
    let result = super.tryCall(
      "prepareWithdraw",
      "prepareWithdraw():(uint256,uint256,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new PoolInstrument__prepareWithdrawResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  previewDeposit(assets: BigInt): BigInt {
    let result = super.call(
      "previewDeposit",
      "previewDeposit(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(assets)]
    );

    return result[0].toBigInt();
  }

  try_previewDeposit(assets: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "previewDeposit",
      "previewDeposit(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(assets)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  previewMint(shares: BigInt): BigInt {
    let result = super.call("previewMint", "previewMint(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(shares)
    ]);

    return result[0].toBigInt();
  }

  try_previewMint(shares: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "previewMint",
      "previewMint(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(shares)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  previewRedeem(shares: BigInt): BigInt {
    let result = super.call(
      "previewRedeem",
      "previewRedeem(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(shares)]
    );

    return result[0].toBigInt();
  }

  try_previewRedeem(shares: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "previewRedeem",
      "previewRedeem(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(shares)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  previewWithdraw(assets: BigInt): BigInt {
    let result = super.call(
      "previewWithdraw",
      "previewWithdraw(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(assets)]
    );

    return result[0].toBigInt();
  }

  try_previewWithdraw(assets: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "previewWithdraw",
      "previewWithdraw(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(assets)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  rateContract(): Address {
    let result = super.call("rateContract", "rateContract():(address)", []);

    return result[0].toAddress();
  }

  try_rateContract(): ethereum.CallResult<Address> {
    let result = super.tryCall("rateContract", "rateContract():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  rateInitCallData(): Bytes {
    let result = super.call(
      "rateInitCallData",
      "rateInitCallData():(bytes)",
      []
    );

    return result[0].toBytes();
  }

  try_rateInitCallData(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "rateInitCallData",
      "rateInitCallData():(bytes)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  readyForWithdrawal(): boolean {
    let result = super.call(
      "readyForWithdrawal",
      "readyForWithdrawal():(bool)",
      []
    );

    return result[0].toBoolean();
  }

  try_readyForWithdrawal(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "readyForWithdrawal",
      "readyForWithdrawal():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  redeem(shares: BigInt, receiver: Address, owner: Address): BigInt {
    let result = super.call(
      "redeem",
      "redeem(uint256,address,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(shares),
        ethereum.Value.fromAddress(receiver),
        ethereum.Value.fromAddress(owner)
      ]
    );

    return result[0].toBigInt();
  }

  try_redeem(
    shares: BigInt,
    receiver: Address,
    owner: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "redeem",
      "redeem(uint256,address,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(shares),
        ethereum.Value.fromAddress(receiver),
        ethereum.Value.fromAddress(owner)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  redeemUnderlying(amount: BigInt): boolean {
    let result = super.call(
      "redeemUnderlying",
      "redeemUnderlying(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(amount)]
    );

    return result[0].toBoolean();
  }

  try_redeemUnderlying(amount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "redeemUnderlying",
      "redeemUnderlying(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(amount)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  removeAvailableCollateral(
    _collateral: Address,
    _tokenId: BigInt,
    _receiver: Address
  ): BigInt {
    let result = super.call(
      "removeAvailableCollateral",
      "removeAvailableCollateral(address,uint256,address):(uint256)",
      [
        ethereum.Value.fromAddress(_collateral),
        ethereum.Value.fromUnsignedBigInt(_tokenId),
        ethereum.Value.fromAddress(_receiver)
      ]
    );

    return result[0].toBigInt();
  }

  try_removeAvailableCollateral(
    _collateral: Address,
    _tokenId: BigInt,
    _receiver: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "removeAvailableCollateral",
      "removeAvailableCollateral(address,uint256,address):(uint256)",
      [
        ethereum.Value.fromAddress(_collateral),
        ethereum.Value.fromUnsignedBigInt(_tokenId),
        ethereum.Value.fromAddress(_receiver)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  removeableCollateral(
    _borrower: Address,
    tokenId: BigInt,
    collateral: Address
  ): BigInt {
    let result = super.call(
      "removeableCollateral",
      "removeableCollateral(address,uint256,address):(uint256)",
      [
        ethereum.Value.fromAddress(_borrower),
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromAddress(collateral)
      ]
    );

    return result[0].toBigInt();
  }

  try_removeableCollateral(
    _borrower: Address,
    tokenId: BigInt,
    collateral: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "removeableCollateral",
      "removeableCollateral(address,uint256,address):(uint256)",
      [
        ethereum.Value.fromAddress(_borrower),
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromAddress(collateral)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  repay(_shares: BigInt, _borrower: Address): BigInt {
    let result = super.call("repay", "repay(uint256,address):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(_shares),
      ethereum.Value.fromAddress(_borrower)
    ]);

    return result[0].toBigInt();
  }

  try_repay(_shares: BigInt, _borrower: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("repay", "repay(uint256,address):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(_shares),
      ethereum.Value.fromAddress(_borrower)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  repayWithAmount(_amount: BigInt, _borrower: Address): BigInt {
    let result = super.call(
      "repayWithAmount",
      "repayWithAmount(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_amount),
        ethereum.Value.fromAddress(_borrower)
      ]
    );

    return result[0].toBigInt();
  }

  try_repayWithAmount(
    _amount: BigInt,
    _borrower: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "repayWithAmount",
      "repayWithAmount(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_amount),
        ethereum.Value.fromAddress(_borrower)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  toAssetAmount(_shares: BigInt, _roundUp: boolean): BigInt {
    let result = super.call(
      "toAssetAmount",
      "toAssetAmount(uint256,bool):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_shares),
        ethereum.Value.fromBoolean(_roundUp)
      ]
    );

    return result[0].toBigInt();
  }

  try_toAssetAmount(
    _shares: BigInt,
    _roundUp: boolean
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "toAssetAmount",
      "toAssetAmount(uint256,bool):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_shares),
        ethereum.Value.fromBoolean(_roundUp)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  toAssetShares(_amount: BigInt, _roundUp: boolean): BigInt {
    let result = super.call(
      "toAssetShares",
      "toAssetShares(uint256,bool):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_amount),
        ethereum.Value.fromBoolean(_roundUp)
      ]
    );

    return result[0].toBigInt();
  }

  try_toAssetShares(
    _amount: BigInt,
    _roundUp: boolean
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "toAssetShares",
      "toAssetShares(uint256,bool):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_amount),
        ethereum.Value.fromBoolean(_roundUp)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  toBorrowAmount(_shares: BigInt, _roundUp: boolean): BigInt {
    let result = super.call(
      "toBorrowAmount",
      "toBorrowAmount(uint256,bool):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_shares),
        ethereum.Value.fromBoolean(_roundUp)
      ]
    );

    return result[0].toBigInt();
  }

  try_toBorrowAmount(
    _shares: BigInt,
    _roundUp: boolean
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "toBorrowAmount",
      "toBorrowAmount(uint256,bool):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_shares),
        ethereum.Value.fromBoolean(_roundUp)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  toBorrowShares(_amount: BigInt, _roundUp: boolean): BigInt {
    let result = super.call(
      "toBorrowShares",
      "toBorrowShares(uint256,bool):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_amount),
        ethereum.Value.fromBoolean(_roundUp)
      ]
    );

    return result[0].toBigInt();
  }

  try_toBorrowShares(
    _amount: BigInt,
    _roundUp: boolean
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "toBorrowShares",
      "toBorrowShares(uint256,bool):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_amount),
        ethereum.Value.fromBoolean(_roundUp)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalAsset(): PoolInstrument__totalAssetResult {
    let result = super.call("totalAsset", "totalAsset():(uint128,uint128)", []);

    return new PoolInstrument__totalAssetResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_totalAsset(): ethereum.CallResult<PoolInstrument__totalAssetResult> {
    let result = super.tryCall(
      "totalAsset",
      "totalAsset():(uint128,uint128)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new PoolInstrument__totalAssetResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  totalAssetAvailable(): BigInt {
    let result = super.call(
      "totalAssetAvailable",
      "totalAssetAvailable():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalAssetAvailable(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalAssetAvailable",
      "totalAssetAvailable():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalAssets(): BigInt {
    let result = super.call("totalAssets", "totalAssets():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalAssets(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalAssets", "totalAssets():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalBorrow(): PoolInstrument__totalBorrowResult {
    let result = super.call(
      "totalBorrow",
      "totalBorrow():(uint128,uint128)",
      []
    );

    return new PoolInstrument__totalBorrowResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_totalBorrow(): ethereum.CallResult<PoolInstrument__totalBorrowResult> {
    let result = super.tryCall(
      "totalBorrow",
      "totalBorrow():(uint128,uint128)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new PoolInstrument__totalBorrowResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transfer(to: Address, amount: BigInt): boolean {
    let result = super.call("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(to),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_transfer(to: Address, amount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(to),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  transferFrom(from: Address, to: Address, amount: BigInt): boolean {
    let result = super.call(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBoolean();
  }

  try_transferFrom(
    from: Address,
    to: Address,
    amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  underlying(): Address {
    let result = super.call("underlying", "underlying():(address)", []);

    return result[0].toAddress();
  }

  try_underlying(): ethereum.CallResult<Address> {
    let result = super.tryCall("underlying", "underlying():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  userAuctionId(param0: Address): BigInt {
    let result = super.call(
      "userAuctionId",
      "userAuctionId(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_userAuctionId(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "userAuctionId",
      "userAuctionId(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  userBorrowShares(param0: Address): BigInt {
    let result = super.call(
      "userBorrowShares",
      "userBorrowShares(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_userBorrowShares(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "userBorrowShares",
      "userBorrowShares(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  userCollateralERC20(param0: Address, param1: Address): BigInt {
    let result = super.call(
      "userCollateralERC20",
      "userCollateralERC20(address,address):(uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );

    return result[0].toBigInt();
  }

  try_userCollateralERC20(
    param0: Address,
    param1: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "userCollateralERC20",
      "userCollateralERC20(address,address):(uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  userCollateralNFTs(param0: Address, param1: BigInt): Address {
    let result = super.call(
      "userCollateralNFTs",
      "userCollateralNFTs(address,uint256):(address)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toAddress();
  }

  try_userCollateralNFTs(
    param0: Address,
    param1: BigInt
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "userCollateralNFTs",
      "userCollateralNFTs(address,uint256):(address)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  validators(param0: BigInt): Address {
    let result = super.call("validators", "validators(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_validators(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("validators", "validators(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  vault(): Address {
    let result = super.call("vault", "vault():(address)", []);

    return result[0].toAddress();
  }

  try_vault(): ethereum.CallResult<Address> {
    let result = super.tryCall("vault", "vault():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  withdraw(assets: BigInt, receiver: Address, owner: Address): BigInt {
    let result = super.call(
      "withdraw",
      "withdraw(uint256,address,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(assets),
        ethereum.Value.fromAddress(receiver),
        ethereum.Value.fromAddress(owner)
      ]
    );

    return result[0].toBigInt();
  }

  try_withdraw(
    assets: BigInt,
    receiver: Address,
    owner: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "withdraw",
      "withdraw(uint256,address,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(assets),
        ethereum.Value.fromAddress(receiver),
        ethereum.Value.fromAddress(owner)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _vault(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _controller(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _utilizer(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _asset(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _name(): string {
    return this._call.inputValues[4].value.toString();
  }

  get _symbol(): string {
    return this._call.inputValues[5].value.toString();
  }

  get _rateCalculator(): Address {
    return this._call.inputValues[6].value.toAddress();
  }

  get _rateInitCallData(): Bytes {
    return this._call.inputValues[7].value.toBytes();
  }

  get _collaterals(): Array<ConstructorCall_collateralsStruct> {
    return this._call.inputValues[8].value.toTupleArray<
      ConstructorCall_collateralsStruct
    >();
  }

  get _collateralDatas(): Array<ConstructorCall_collateralDatasStruct> {
    return this._call.inputValues[9].value.toTupleArray<
      ConstructorCall_collateralDatasStruct
    >();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall_collateralsStruct extends ethereum.Tuple {
  get tokenAddress(): Address {
    return this[0].toAddress();
  }

  get tokenId(): BigInt {
    return this[1].toBigInt();
  }
}

export class ConstructorCall_collateralDatasStruct extends ethereum.Tuple {
  get totalCollateral(): BigInt {
    return this[0].toBigInt();
  }

  get maxAmount(): BigInt {
    return this[1].toBigInt();
  }

  get maxBorrowAmount(): BigInt {
    return this[2].toBigInt();
  }

  get isERC20(): boolean {
    return this[3].toBoolean();
  }
}

export class AddAcceptedCollateralCall extends ethereum.Call {
  get inputs(): AddAcceptedCollateralCall__Inputs {
    return new AddAcceptedCollateralCall__Inputs(this);
  }

  get outputs(): AddAcceptedCollateralCall__Outputs {
    return new AddAcceptedCollateralCall__Outputs(this);
  }
}

export class AddAcceptedCollateralCall__Inputs {
  _call: AddAcceptedCollateralCall;

  constructor(call: AddAcceptedCollateralCall) {
    this._call = call;
  }

  get _collateral(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _maxAmount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _maxBorrowAmount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _isERC20(): boolean {
    return this._call.inputValues[4].value.toBoolean();
  }
}

export class AddAcceptedCollateralCall__Outputs {
  _call: AddAcceptedCollateralCall;

  constructor(call: AddAcceptedCollateralCall) {
    this._call = call;
  }
}

export class AddCollateralCall extends ethereum.Call {
  get inputs(): AddCollateralCall__Inputs {
    return new AddCollateralCall__Inputs(this);
  }

  get outputs(): AddCollateralCall__Outputs {
    return new AddCollateralCall__Outputs(this);
  }
}

export class AddCollateralCall__Inputs {
  _call: AddCollateralCall;

  constructor(call: AddCollateralCall) {
    this._call = call;
  }

  get _collateral(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _collateralAmount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _borrower(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class AddCollateralCall__Outputs {
  _call: AddCollateralCall;

  constructor(call: AddCollateralCall) {
    this._call = call;
  }
}

export class AddInterestCall extends ethereum.Call {
  get inputs(): AddInterestCall__Inputs {
    return new AddInterestCall__Inputs(this);
  }

  get outputs(): AddInterestCall__Outputs {
    return new AddInterestCall__Outputs(this);
  }
}

export class AddInterestCall__Inputs {
  _call: AddInterestCall;

  constructor(call: AddInterestCall) {
    this._call = call;
  }
}

export class AddInterestCall__Outputs {
  _call: AddInterestCall;

  constructor(call: AddInterestCall) {
    this._call = call;
  }

  get _interestEarned(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get _feesAmount(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }

  get _feesShare(): BigInt {
    return this._call.outputValues[2].value.toBigInt();
  }

  get _newRate(): BigInt {
    return this._call.outputValues[3].value.toBigInt();
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class BorrowCall extends ethereum.Call {
  get inputs(): BorrowCall__Inputs {
    return new BorrowCall__Inputs(this);
  }

  get outputs(): BorrowCall__Outputs {
    return new BorrowCall__Outputs(this);
  }
}

export class BorrowCall__Inputs {
  _call: BorrowCall;

  constructor(call: BorrowCall) {
    this._call = call;
  }

  get _borrowAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _collateral(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _collateralAmount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _reciever(): Address {
    return this._call.inputValues[4].value.toAddress();
  }
}

export class BorrowCall__Outputs {
  _call: BorrowCall;

  constructor(call: BorrowCall) {
    this._call = call;
  }

  get _shares(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class DepositCall extends ethereum.Call {
  get inputs(): DepositCall__Inputs {
    return new DepositCall__Inputs(this);
  }

  get outputs(): DepositCall__Outputs {
    return new DepositCall__Outputs(this);
  }
}

export class DepositCall__Inputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get assets(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get receiver(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class DepositCall__Outputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get shares(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class LiquidateCall extends ethereum.Call {
  get inputs(): LiquidateCall__Inputs {
    return new LiquidateCall__Inputs(this);
  }

  get outputs(): LiquidateCall__Outputs {
    return new LiquidateCall__Outputs(this);
  }
}

export class LiquidateCall__Inputs {
  _call: LiquidateCall;

  constructor(call: LiquidateCall) {
    this._call = call;
  }

  get _borrower(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class LiquidateCall__Outputs {
  _call: LiquidateCall;

  constructor(call: LiquidateCall) {
    this._call = call;
  }

  get _collateral(): LiquidateCall_collateralStruct {
    return changetype<LiquidateCall_collateralStruct>(
      this._call.outputValues[0].value.toTuple()
    );
  }

  get _auctionId(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class LiquidateCall_collateralStruct extends ethereum.Tuple {
  get tokenAddress(): Address {
    return this[0].toAddress();
  }

  get tokenId(): BigInt {
    return this[1].toBigInt();
  }
}

export class LiquidateAllPositionsCall extends ethereum.Call {
  get inputs(): LiquidateAllPositionsCall__Inputs {
    return new LiquidateAllPositionsCall__Inputs(this);
  }

  get outputs(): LiquidateAllPositionsCall__Outputs {
    return new LiquidateAllPositionsCall__Outputs(this);
  }
}

export class LiquidateAllPositionsCall__Inputs {
  _call: LiquidateAllPositionsCall;

  constructor(call: LiquidateAllPositionsCall) {
    this._call = call;
  }
}

export class LiquidateAllPositionsCall__Outputs {
  _call: LiquidateAllPositionsCall;

  constructor(call: LiquidateAllPositionsCall) {
    this._call = call;
  }

  get _amountFreed(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class LiquidatePositionCall extends ethereum.Call {
  get inputs(): LiquidatePositionCall__Inputs {
    return new LiquidatePositionCall__Inputs(this);
  }

  get outputs(): LiquidatePositionCall__Outputs {
    return new LiquidatePositionCall__Outputs(this);
  }
}

export class LiquidatePositionCall__Inputs {
  _call: LiquidatePositionCall;

  constructor(call: LiquidatePositionCall) {
    this._call = call;
  }

  get _amountNeeded(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class LiquidatePositionCall__Outputs {
  _call: LiquidatePositionCall;

  constructor(call: LiquidatePositionCall) {
    this._call = call;
  }

  get _liquidatedAmount(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get _loss(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class MintCall extends ethereum.Call {
  get inputs(): MintCall__Inputs {
    return new MintCall__Inputs(this);
  }

  get outputs(): MintCall__Outputs {
    return new MintCall__Outputs(this);
  }
}

export class MintCall__Inputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get shares(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get receiver(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class MintCall__Outputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get assets(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class OnERC721ReceivedCall extends ethereum.Call {
  get inputs(): OnERC721ReceivedCall__Inputs {
    return new OnERC721ReceivedCall__Inputs(this);
  }

  get outputs(): OnERC721ReceivedCall__Outputs {
    return new OnERC721ReceivedCall__Outputs(this);
  }
}

export class OnERC721ReceivedCall__Inputs {
  _call: OnERC721ReceivedCall;

  constructor(call: OnERC721ReceivedCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value1(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value2(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get value3(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class OnERC721ReceivedCall__Outputs {
  _call: OnERC721ReceivedCall;

  constructor(call: OnERC721ReceivedCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class OnMarketApprovalCall extends ethereum.Call {
  get inputs(): OnMarketApprovalCall__Inputs {
    return new OnMarketApprovalCall__Inputs(this);
  }

  get outputs(): OnMarketApprovalCall__Outputs {
    return new OnMarketApprovalCall__Outputs(this);
  }
}

export class OnMarketApprovalCall__Inputs {
  _call: OnMarketApprovalCall;

  constructor(call: OnMarketApprovalCall) {
    this._call = call;
  }

  get principal(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get yield(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class OnMarketApprovalCall__Outputs {
  _call: OnMarketApprovalCall;

  constructor(call: OnMarketApprovalCall) {
    this._call = call;
  }
}

export class PermitCall extends ethereum.Call {
  get inputs(): PermitCall__Inputs {
    return new PermitCall__Inputs(this);
  }

  get outputs(): PermitCall__Outputs {
    return new PermitCall__Outputs(this);
  }
}

export class PermitCall__Inputs {
  _call: PermitCall;

  constructor(call: PermitCall) {
    this._call = call;
  }

  get owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get spender(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get deadline(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get v(): i32 {
    return this._call.inputValues[4].value.toI32();
  }

  get r(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }

  get s(): Bytes {
    return this._call.inputValues[6].value.toBytes();
  }
}

export class PermitCall__Outputs {
  _call: PermitCall;

  constructor(call: PermitCall) {
    this._call = call;
  }
}

export class PrepareWithdrawCall extends ethereum.Call {
  get inputs(): PrepareWithdrawCall__Inputs {
    return new PrepareWithdrawCall__Inputs(this);
  }

  get outputs(): PrepareWithdrawCall__Outputs {
    return new PrepareWithdrawCall__Outputs(this);
  }
}

export class PrepareWithdrawCall__Inputs {
  _call: PrepareWithdrawCall;

  constructor(call: PrepareWithdrawCall) {
    this._call = call;
  }
}

export class PrepareWithdrawCall__Outputs {
  _call: PrepareWithdrawCall;

  constructor(call: PrepareWithdrawCall) {
    this._call = call;
  }

  get _profit(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get _loss(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }

  get _debtPayment(): BigInt {
    return this._call.outputValues[2].value.toBigInt();
  }
}

export class PullRawFundsCall extends ethereum.Call {
  get inputs(): PullRawFundsCall__Inputs {
    return new PullRawFundsCall__Inputs(this);
  }

  get outputs(): PullRawFundsCall__Outputs {
    return new PullRawFundsCall__Outputs(this);
  }
}

export class PullRawFundsCall__Inputs {
  _call: PullRawFundsCall;

  constructor(call: PullRawFundsCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class PullRawFundsCall__Outputs {
  _call: PullRawFundsCall;

  constructor(call: PullRawFundsCall) {
    this._call = call;
  }
}

export class RedeemCall extends ethereum.Call {
  get inputs(): RedeemCall__Inputs {
    return new RedeemCall__Inputs(this);
  }

  get outputs(): RedeemCall__Outputs {
    return new RedeemCall__Outputs(this);
  }
}

export class RedeemCall__Inputs {
  _call: RedeemCall;

  constructor(call: RedeemCall) {
    this._call = call;
  }

  get shares(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get receiver(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get owner(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class RedeemCall__Outputs {
  _call: RedeemCall;

  constructor(call: RedeemCall) {
    this._call = call;
  }

  get assets(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class RedeemUnderlyingCall extends ethereum.Call {
  get inputs(): RedeemUnderlyingCall__Inputs {
    return new RedeemUnderlyingCall__Inputs(this);
  }

  get outputs(): RedeemUnderlyingCall__Outputs {
    return new RedeemUnderlyingCall__Outputs(this);
  }
}

export class RedeemUnderlyingCall__Inputs {
  _call: RedeemUnderlyingCall;

  constructor(call: RedeemUnderlyingCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class RedeemUnderlyingCall__Outputs {
  _call: RedeemUnderlyingCall;

  constructor(call: RedeemUnderlyingCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class RemoveAvailableCollateralCall extends ethereum.Call {
  get inputs(): RemoveAvailableCollateralCall__Inputs {
    return new RemoveAvailableCollateralCall__Inputs(this);
  }

  get outputs(): RemoveAvailableCollateralCall__Outputs {
    return new RemoveAvailableCollateralCall__Outputs(this);
  }
}

export class RemoveAvailableCollateralCall__Inputs {
  _call: RemoveAvailableCollateralCall;

  constructor(call: RemoveAvailableCollateralCall) {
    this._call = call;
  }

  get _collateral(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _receiver(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class RemoveAvailableCollateralCall__Outputs {
  _call: RemoveAvailableCollateralCall;

  constructor(call: RemoveAvailableCollateralCall) {
    this._call = call;
  }

  get removeable(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class RemoveCollateralCall extends ethereum.Call {
  get inputs(): RemoveCollateralCall__Inputs {
    return new RemoveCollateralCall__Inputs(this);
  }

  get outputs(): RemoveCollateralCall__Outputs {
    return new RemoveCollateralCall__Outputs(this);
  }
}

export class RemoveCollateralCall__Inputs {
  _call: RemoveCollateralCall;

  constructor(call: RemoveCollateralCall) {
    this._call = call;
  }

  get _collateral(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _collateralAmount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _receiver(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class RemoveCollateralCall__Outputs {
  _call: RemoveCollateralCall;

  constructor(call: RemoveCollateralCall) {
    this._call = call;
  }
}

export class RepayCall extends ethereum.Call {
  get inputs(): RepayCall__Inputs {
    return new RepayCall__Inputs(this);
  }

  get outputs(): RepayCall__Outputs {
    return new RepayCall__Outputs(this);
  }
}

export class RepayCall__Inputs {
  _call: RepayCall;

  constructor(call: RepayCall) {
    this._call = call;
  }

  get _shares(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _borrower(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RepayCall__Outputs {
  _call: RepayCall;

  constructor(call: RepayCall) {
    this._call = call;
  }

  get _amountToRepay(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class RepayWithAmountCall extends ethereum.Call {
  get inputs(): RepayWithAmountCall__Inputs {
    return new RepayWithAmountCall__Inputs(this);
  }

  get outputs(): RepayWithAmountCall__Outputs {
    return new RepayWithAmountCall__Outputs(this);
  }
}

export class RepayWithAmountCall__Inputs {
  _call: RepayWithAmountCall;

  constructor(call: RepayWithAmountCall) {
    this._call = call;
  }

  get _amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _borrower(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RepayWithAmountCall__Outputs {
  _call: RepayWithAmountCall;

  constructor(call: RepayWithAmountCall) {
    this._call = call;
  }

  get _sharesToRepay(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class SetUtilizerCall extends ethereum.Call {
  get inputs(): SetUtilizerCall__Inputs {
    return new SetUtilizerCall__Inputs(this);
  }

  get outputs(): SetUtilizerCall__Outputs {
    return new SetUtilizerCall__Outputs(this);
  }
}

export class SetUtilizerCall__Inputs {
  _call: SetUtilizerCall;

  constructor(call: SetUtilizerCall) {
    this._call = call;
  }

  get _Utilizer(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetUtilizerCall__Outputs {
  _call: SetUtilizerCall;

  constructor(call: SetUtilizerCall) {
    this._call = call;
  }
}

export class SetVaultCall extends ethereum.Call {
  get inputs(): SetVaultCall__Inputs {
    return new SetVaultCall__Inputs(this);
  }

  get outputs(): SetVaultCall__Outputs {
    return new SetVaultCall__Outputs(this);
  }
}

export class SetVaultCall__Inputs {
  _call: SetVaultCall;

  constructor(call: SetVaultCall) {
    this._call = call;
  }

  get newVault(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetVaultCall__Outputs {
  _call: SetVaultCall;

  constructor(call: SetVaultCall) {
    this._call = call;
  }
}

export class Store_internal_balanceCall extends ethereum.Call {
  get inputs(): Store_internal_balanceCall__Inputs {
    return new Store_internal_balanceCall__Inputs(this);
  }

  get outputs(): Store_internal_balanceCall__Outputs {
    return new Store_internal_balanceCall__Outputs(this);
  }
}

export class Store_internal_balanceCall__Inputs {
  _call: Store_internal_balanceCall;

  constructor(call: Store_internal_balanceCall) {
    this._call = call;
  }
}

export class Store_internal_balanceCall__Outputs {
  _call: Store_internal_balanceCall;

  constructor(call: Store_internal_balanceCall) {
    this._call = call;
  }
}

export class TransferCall extends ethereum.Call {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this);
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this);
  }
}

export class TransferCall__Inputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferCall__Outputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get assets(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get receiver(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get owner(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get shares(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}
