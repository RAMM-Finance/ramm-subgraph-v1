// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Market extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Market entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Market must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Market", id.toString(), this);
    }
  }

  static load(id: string): Market | null {
    return changetype<Market | null>(store.get("Market", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get vault(): string {
    let value = this.get("vault");
    return value!.toString();
  }

  set vault(value: string) {
    this.set("vault", Value.fromString(value));
  }

  get bondPool(): string {
    let value = this.get("bondPool");
    return value!.toString();
  }

  set bondPool(value: string) {
    this.set("bondPool", Value.fromString(value));
  }

  get creationTimestamp(): BigInt {
    let value = this.get("creationTimestamp");
    return value!.toBigInt();
  }

  set creationTimestamp(value: BigInt) {
    this.set("creationTimestamp", Value.fromBigInt(value));
  }

  get resolutionTimestamp(): BigInt {
    let value = this.get("resolutionTimestamp");
    return value!.toBigInt();
  }

  set resolutionTimestamp(value: BigInt) {
    this.set("resolutionTimestamp", Value.fromBigInt(value));
  }

  get duringAssessment(): boolean {
    let value = this.get("duringAssessment");
    return value!.toBoolean();
  }

  set duringAssessment(value: boolean) {
    this.set("duringAssessment", Value.fromBoolean(value));
  }

  get onlyReputable(): boolean {
    let value = this.get("onlyReputable");
    return value!.toBoolean();
  }

  set onlyReputable(value: boolean) {
    this.set("onlyReputable", Value.fromBoolean(value));
  }

  get resolved(): boolean {
    let value = this.get("resolved");
    return value!.toBoolean();
  }

  set resolved(value: boolean) {
    this.set("resolved", Value.fromBoolean(value));
  }

  get alive(): boolean {
    let value = this.get("alive");
    return value!.toBoolean();
  }

  set alive(value: boolean) {
    this.set("alive", Value.fromBoolean(value));
  }

  get baseBudget(): BigDecimal {
    let value = this.get("baseBudget");
    return value!.toBigDecimal();
  }

  set baseBudget(value: BigDecimal) {
    this.set("baseBudget", Value.fromBigDecimal(value));
  }

  get marketCondition(): boolean {
    let value = this.get("marketCondition");
    return value!.toBoolean();
  }

  set marketCondition(value: boolean) {
    this.set("marketCondition", Value.fromBoolean(value));
  }

  get prematureResolve(): boolean {
    let value = this.get("prematureResolve");
    return value!.toBoolean();
  }

  set prematureResolve(value: boolean) {
    this.set("prematureResolve", Value.fromBoolean(value));
  }

  get extraGain(): BigDecimal | null {
    let value = this.get("extraGain");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set extraGain(value: BigDecimal | null) {
    if (!value) {
      this.unset("extraGain");
    } else {
      this.set("extraGain", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get principalLoss(): BigDecimal | null {
    let value = this.get("principalLoss");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set principalLoss(value: BigDecimal | null) {
    if (!value) {
      this.unset("principalLoss");
    } else {
      this.set("principalLoss", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get atLoss(): boolean {
    let value = this.get("atLoss");
    return value!.toBoolean();
  }

  set atLoss(value: boolean) {
    this.set("atLoss", Value.fromBoolean(value));
  }

  get N(): BigInt {
    let value = this.get("N");
    return value!.toBigInt();
  }

  set N(value: BigInt) {
    this.set("N", Value.fromBigInt(value));
  }

  get sigma(): BigDecimal {
    let value = this.get("sigma");
    return value!.toBigDecimal();
  }

  set sigma(value: BigDecimal) {
    this.set("sigma", Value.fromBigDecimal(value));
  }

  get alpha(): BigDecimal {
    let value = this.get("alpha");
    return value!.toBigDecimal();
  }

  set alpha(value: BigDecimal) {
    this.set("alpha", Value.fromBigDecimal(value));
  }

  get omega(): BigDecimal {
    let value = this.get("omega");
    return value!.toBigDecimal();
  }

  set omega(value: BigDecimal) {
    this.set("omega", Value.fromBigDecimal(value));
  }

  get delta(): BigDecimal {
    let value = this.get("delta");
    return value!.toBigDecimal();
  }

  set delta(value: BigDecimal) {
    this.set("delta", Value.fromBigDecimal(value));
  }

  get r(): BigDecimal {
    let value = this.get("r");
    return value!.toBigDecimal();
  }

  set r(value: BigDecimal) {
    this.set("r", Value.fromBigDecimal(value));
  }

  get s(): BigDecimal {
    let value = this.get("s");
    return value!.toBigDecimal();
  }

  set s(value: BigDecimal) {
    this.set("s", Value.fromBigDecimal(value));
  }

  get steak(): BigDecimal {
    let value = this.get("steak");
    return value!.toBigDecimal();
  }

  set steak(value: BigDecimal) {
    this.set("steak", Value.fromBigDecimal(value));
  }

  get redemptionPrice(): BigDecimal {
    let value = this.get("redemptionPrice");
    return value!.toBigDecimal();
  }

  set redemptionPrice(value: BigDecimal) {
    this.set("redemptionPrice", Value.fromBigDecimal(value));
  }

  get totalCollateral(): BigDecimal {
    let value = this.get("totalCollateral");
    return value!.toBigDecimal();
  }

  set totalCollateral(value: BigDecimal) {
    this.set("totalCollateral", Value.fromBigDecimal(value));
  }

  get managers(): Array<string> | null {
    let value = this.get("managers");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set managers(value: Array<string> | null) {
    if (!value) {
      this.unset("managers");
    } else {
      this.set("managers", Value.fromStringArray(<Array<string>>value));
    }
  }

  get approvedPrincipal(): BigDecimal | null {
    let value = this.get("approvedPrincipal");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set approvedPrincipal(value: BigDecimal | null) {
    if (!value) {
      this.unset("approvedPrincipal");
    } else {
      this.set("approvedPrincipal", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get approvedYield(): BigDecimal | null {
    let value = this.get("approvedYield");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set approvedYield(value: BigDecimal | null) {
    if (!value) {
      this.unset("approvedYield");
    } else {
      this.set("approvedYield", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get instrumentType(): string {
    let value = this.get("instrumentType");
    return value!.toString();
  }

  set instrumentType(value: string) {
    this.set("instrumentType", Value.fromString(value));
  }

  get creditlineInstrument(): string | null {
    let value = this.get("creditlineInstrument");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set creditlineInstrument(value: string | null) {
    if (!value) {
      this.unset("creditlineInstrument");
    } else {
      this.set("creditlineInstrument", Value.fromString(<string>value));
    }
  }

  get poolInstrument(): string | null {
    let value = this.get("poolInstrument");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set poolInstrument(value: string | null) {
    if (!value) {
      this.unset("poolInstrument");
    } else {
      this.set("poolInstrument", Value.fromString(<string>value));
    }
  }

  get generalInstrument(): string | null {
    let value = this.get("generalInstrument");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set generalInstrument(value: string | null) {
    if (!value) {
      this.unset("generalInstrument");
    } else {
      this.set("generalInstrument", Value.fromString(<string>value));
    }
  }

  get validators(): Array<string> {
    let value = this.get("validators");
    return value!.toStringArray();
  }

  set validators(value: Array<string>) {
    this.set("validators", Value.fromStringArray(value));
  }

  get valCap(): BigDecimal {
    let value = this.get("valCap");
    return value!.toBigDecimal();
  }

  set valCap(value: BigDecimal) {
    this.set("valCap", Value.fromBigDecimal(value));
  }

  get initialStake(): BigDecimal {
    let value = this.get("initialStake");
    return value!.toBigDecimal();
  }

  set initialStake(value: BigDecimal) {
    this.set("initialStake", Value.fromBigDecimal(value));
  }

  get finalStake(): BigDecimal {
    let value = this.get("finalStake");
    return value!.toBigDecimal();
  }

  set finalStake(value: BigDecimal) {
    this.set("finalStake", Value.fromBigDecimal(value));
  }

  get validatorAveragePrice(): BigDecimal {
    let value = this.get("validatorAveragePrice");
    return value!.toBigDecimal();
  }

  set validatorAveragePrice(value: BigDecimal) {
    this.set("validatorAveragePrice", Value.fromBigDecimal(value));
  }

  get validatorNumResolved(): BigInt {
    let value = this.get("validatorNumResolved");
    return value!.toBigInt();
  }

  set validatorNumResolved(value: BigInt) {
    this.set("validatorNumResolved", Value.fromBigInt(value));
  }

  get validatorNumApproved(): BigInt {
    let value = this.get("validatorNumApproved");
    return value!.toBigInt();
  }

  set validatorNumApproved(value: BigInt) {
    this.set("validatorNumApproved", Value.fromBigInt(value));
  }

  get validatorTotalZCB(): BigInt {
    let value = this.get("validatorTotalZCB");
    return value!.toBigInt();
  }

  set validatorTotalZCB(value: BigInt) {
    this.set("validatorTotalZCB", Value.fromBigInt(value));
  }

  get validatorTotalStaked(): BigInt {
    let value = this.get("validatorTotalStaked");
    return value!.toBigInt();
  }

  set validatorTotalStaked(value: BigInt) {
    this.set("validatorTotalStaked", Value.fromBigInt(value));
  }
}

export class Validator extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Validator entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Validator must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Validator", id.toString(), this);
    }
  }

  static load(id: string): Validator | null {
    return changetype<Validator | null>(store.get("Validator", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get market(): string {
    let value = this.get("market");
    return value!.toString();
  }

  set market(value: string) {
    this.set("market", Value.fromString(value));
  }

  get approved(): boolean {
    let value = this.get("approved");
    return value!.toBoolean();
  }

  set approved(value: boolean) {
    this.set("approved", Value.fromBoolean(value));
  }

  get resolved(): boolean {
    let value = this.get("resolved");
    return value!.toBoolean();
  }

  set resolved(value: boolean) {
    this.set("resolved", Value.fromBoolean(value));
  }
}

export class GeneralInstrument extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save GeneralInstrument entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type GeneralInstrument must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("GeneralInstrument", id.toString(), this);
    }
  }

  static load(id: string): GeneralInstrument | null {
    return changetype<GeneralInstrument | null>(
      store.get("GeneralInstrument", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value!.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get market(): string {
    let value = this.get("market");
    return value!.toString();
  }

  set market(value: string) {
    this.set("market", Value.fromString(value));
  }

  get vault(): string {
    let value = this.get("vault");
    return value!.toString();
  }

  set vault(value: string) {
    this.set("vault", Value.fromString(value));
  }

  get utilizer(): string {
    let value = this.get("utilizer");
    return value!.toString();
  }

  set utilizer(value: string) {
    this.set("utilizer", Value.fromString(value));
  }

  get underlyingBalance(): BigDecimal {
    let value = this.get("underlyingBalance");
    return value!.toBigDecimal();
  }

  set underlyingBalance(value: BigDecimal) {
    this.set("underlyingBalance", Value.fromBigDecimal(value));
  }

  get seniorAPR(): BigDecimal {
    let value = this.get("seniorAPR");
    return value!.toBigDecimal();
  }

  set seniorAPR(value: BigDecimal) {
    this.set("seniorAPR", Value.fromBigDecimal(value));
  }

  get exposurePercentage(): BigDecimal {
    let value = this.get("exposurePercentage");
    return value!.toBigDecimal();
  }

  set exposurePercentage(value: BigDecimal) {
    this.set("exposurePercentage", Value.fromBigDecimal(value));
  }

  get managerStake(): BigDecimal {
    let value = this.get("managerStake");
    return value!.toBigDecimal();
  }

  set managerStake(value: BigDecimal) {
    this.set("managerStake", Value.fromBigDecimal(value));
  }

  get approvalPrice(): BigDecimal {
    let value = this.get("approvalPrice");
    return value!.toBigDecimal();
  }

  set approvalPrice(value: BigDecimal) {
    this.set("approvalPrice", Value.fromBigDecimal(value));
  }

  get principal(): BigDecimal {
    let value = this.get("principal");
    return value!.toBigDecimal();
  }

  set principal(value: BigDecimal) {
    this.set("principal", Value.fromBigDecimal(value));
  }

  get expectedYield(): BigDecimal {
    let value = this.get("expectedYield");
    return value!.toBigDecimal();
  }

  set expectedYield(value: BigDecimal) {
    this.set("expectedYield", Value.fromBigDecimal(value));
  }

  get duration(): BigInt {
    let value = this.get("duration");
    return value!.toBigInt();
  }

  set duration(value: BigInt) {
    this.set("duration", Value.fromBigInt(value));
  }

  get description(): string {
    let value = this.get("description");
    return value!.toString();
  }

  set description(value: string) {
    this.set("description", Value.fromString(value));
  }

  get maturityDate(): BigInt | null {
    let value = this.get("maturityDate");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set maturityDate(value: BigInt | null) {
    if (!value) {
      this.unset("maturityDate");
    } else {
      this.set("maturityDate", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class VaultFactory extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save VaultFactory entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type VaultFactory must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("VaultFactory", id.toString(), this);
    }
  }

  static load(id: string): VaultFactory | null {
    return changetype<VaultFactory | null>(store.get("VaultFactory", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get vaultCount(): BigInt {
    let value = this.get("vaultCount");
    return value!.toBigInt();
  }

  set vaultCount(value: BigInt) {
    this.set("vaultCount", Value.fromBigInt(value));
  }
}

export class Vault extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Vault entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Vault must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Vault", id.toString(), this);
    }
  }

  static load(id: string): Vault | null {
    return changetype<Vault | null>(store.get("Vault", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get vaultId(): BigInt {
    let value = this.get("vaultId");
    return value!.toBigInt();
  }

  set vaultId(value: BigInt) {
    this.set("vaultId", Value.fromBigInt(value));
  }

  get name(): string {
    let value = this.get("name");
    return value!.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get symbol(): string {
    let value = this.get("symbol");
    return value!.toString();
  }

  set symbol(value: string) {
    this.set("symbol", Value.fromString(value));
  }

  get decimals(): BigInt {
    let value = this.get("decimals");
    return value!.toBigInt();
  }

  set decimals(value: BigInt) {
    this.set("decimals", Value.fromBigInt(value));
  }

  get underlying(): string {
    let value = this.get("underlying");
    return value!.toString();
  }

  set underlying(value: string) {
    this.set("underlying", Value.fromString(value));
  }

  get totalAssets(): BigDecimal {
    let value = this.get("totalAssets");
    return value!.toBigDecimal();
  }

  set totalAssets(value: BigDecimal) {
    this.set("totalAssets", Value.fromBigDecimal(value));
  }

  get totalSupply(): BigDecimal {
    let value = this.get("totalSupply");
    return value!.toBigDecimal();
  }

  set totalSupply(value: BigDecimal) {
    this.set("totalSupply", Value.fromBigDecimal(value));
  }

  get totalInstrumentHoldings(): BigDecimal {
    let value = this.get("totalInstrumentHoldings");
    return value!.toBigDecimal();
  }

  set totalInstrumentHoldings(value: BigDecimal) {
    this.set("totalInstrumentHoldings", Value.fromBigDecimal(value));
  }

  get onlyVerified(): boolean {
    let value = this.get("onlyVerified");
    return value!.toBoolean();
  }

  set onlyVerified(value: boolean) {
    this.set("onlyVerified", Value.fromBoolean(value));
  }

  get rVault(): BigDecimal {
    let value = this.get("rVault");
    return value!.toBigDecimal();
  }

  set rVault(value: BigDecimal) {
    this.set("rVault", Value.fromBigDecimal(value));
  }

  get assetLimit(): BigDecimal {
    let value = this.get("assetLimit");
    return value!.toBigDecimal();
  }

  set assetLimit(value: BigDecimal) {
    this.set("assetLimit", Value.fromBigDecimal(value));
  }

  get totalAssetLimit(): BigDecimal {
    let value = this.get("totalAssetLimit");
    return value!.toBigDecimal();
  }

  set totalAssetLimit(value: BigDecimal) {
    this.set("totalAssetLimit", Value.fromBigDecimal(value));
  }

  get N(): BigInt {
    let value = this.get("N");
    return value!.toBigInt();
  }

  set N(value: BigInt) {
    this.set("N", Value.fromBigInt(value));
  }

  get sigma(): BigDecimal {
    let value = this.get("sigma");
    return value!.toBigDecimal();
  }

  set sigma(value: BigDecimal) {
    this.set("sigma", Value.fromBigDecimal(value));
  }

  get alpha(): BigDecimal {
    let value = this.get("alpha");
    return value!.toBigDecimal();
  }

  set alpha(value: BigDecimal) {
    this.set("alpha", Value.fromBigDecimal(value));
  }

  get omega(): BigDecimal {
    let value = this.get("omega");
    return value!.toBigDecimal();
  }

  set omega(value: BigDecimal) {
    this.set("omega", Value.fromBigDecimal(value));
  }

  get delta(): BigDecimal {
    let value = this.get("delta");
    return value!.toBigDecimal();
  }

  set delta(value: BigDecimal) {
    this.set("delta", Value.fromBigDecimal(value));
  }

  get rMarket(): BigDecimal {
    let value = this.get("rMarket");
    return value!.toBigDecimal();
  }

  set rMarket(value: BigDecimal) {
    this.set("rMarket", Value.fromBigDecimal(value));
  }

  get s(): BigDecimal {
    let value = this.get("s");
    return value!.toBigDecimal();
  }

  set s(value: BigDecimal) {
    this.set("s", Value.fromBigDecimal(value));
  }

  get steak(): BigDecimal {
    let value = this.get("steak");
    return value!.toBigDecimal();
  }

  set steak(value: BigDecimal) {
    this.set("steak", Value.fromBigDecimal(value));
  }

  get instrumentCount(): BigInt {
    let value = this.get("instrumentCount");
    return value!.toBigInt();
  }

  set instrumentCount(value: BigInt) {
    this.set("instrumentCount", Value.fromBigInt(value));
  }

  get creditlineInstruments(): Array<string> {
    let value = this.get("creditlineInstruments");
    return value!.toStringArray();
  }

  set creditlineInstruments(value: Array<string>) {
    this.set("creditlineInstruments", Value.fromStringArray(value));
  }

  get generalInstruments(): Array<string> {
    let value = this.get("generalInstruments");
    return value!.toStringArray();
  }

  set generalInstruments(value: Array<string>) {
    this.set("generalInstruments", Value.fromStringArray(value));
  }

  get poolInstruments(): Array<string> {
    let value = this.get("poolInstruments");
    return value!.toStringArray();
  }

  set poolInstruments(value: Array<string>) {
    this.set("poolInstruments", Value.fromStringArray(value));
  }

  get markets(): Array<string> {
    let value = this.get("markets");
    return value!.toStringArray();
  }

  set markets(value: Array<string>) {
    this.set("markets", Value.fromStringArray(value));
  }

  get marketIds(): Array<string> {
    let value = this.get("marketIds");
    return value!.toStringArray();
  }

  set marketIds(value: Array<string>) {
    this.set("marketIds", Value.fromStringArray(value));
  }

  get utilizationRate(): BigDecimal | null {
    let value = this.get("utilizationRate");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set utilizationRate(value: BigDecimal | null) {
    if (!value) {
      this.unset("utilizationRate");
    } else {
      this.set("utilizationRate", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get totalEstimatedAPR(): BigDecimal | null {
    let value = this.get("totalEstimatedAPR");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set totalEstimatedAPR(value: BigDecimal | null) {
    if (!value) {
      this.unset("totalEstimatedAPR");
    } else {
      this.set("totalEstimatedAPR", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get goalAPR(): BigDecimal | null {
    let value = this.get("goalAPR");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set goalAPR(value: BigDecimal | null) {
    if (!value) {
      this.unset("goalAPR");
    } else {
      this.set("goalAPR", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get totalProtection(): BigDecimal | null {
    let value = this.get("totalProtection");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set totalProtection(value: BigDecimal | null) {
    if (!value) {
      this.unset("totalProtection");
    } else {
      this.set("totalProtection", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get exchangeRate(): BigDecimal {
    let value = this.get("exchangeRate");
    return value!.toBigDecimal();
  }

  set exchangeRate(value: BigDecimal) {
    this.set("exchangeRate", Value.fromBigDecimal(value));
  }
}

export class PoolInstrument extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PoolInstrument entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type PoolInstrument must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("PoolInstrument", id.toString(), this);
    }
  }

  static load(id: string): PoolInstrument | null {
    return changetype<PoolInstrument | null>(store.get("PoolInstrument", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get market(): string {
    let value = this.get("market");
    return value!.toString();
  }

  set market(value: string) {
    this.set("market", Value.fromString(value));
  }

  get vault(): string {
    let value = this.get("vault");
    return value!.toString();
  }

  set vault(value: string) {
    this.set("vault", Value.fromString(value));
  }

  get utilizer(): string {
    let value = this.get("utilizer");
    return value!.toString();
  }

  set utilizer(value: string) {
    this.set("utilizer", Value.fromString(value));
  }

  get underlyingBalance(): BigDecimal {
    let value = this.get("underlyingBalance");
    return value!.toBigDecimal();
  }

  set underlyingBalance(value: BigDecimal) {
    this.set("underlyingBalance", Value.fromBigDecimal(value));
  }

  get name(): string {
    let value = this.get("name");
    return value!.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get seniorAPR(): BigDecimal {
    let value = this.get("seniorAPR");
    return value!.toBigDecimal();
  }

  set seniorAPR(value: BigDecimal) {
    this.set("seniorAPR", Value.fromBigDecimal(value));
  }

  get exposurePercentage(): BigDecimal {
    let value = this.get("exposurePercentage");
    return value!.toBigDecimal();
  }

  set exposurePercentage(value: BigDecimal) {
    this.set("exposurePercentage", Value.fromBigDecimal(value));
  }

  get managerStake(): BigDecimal {
    let value = this.get("managerStake");
    return value!.toBigDecimal();
  }

  set managerStake(value: BigDecimal) {
    this.set("managerStake", Value.fromBigDecimal(value));
  }

  get approvalPrice(): BigDecimal {
    let value = this.get("approvalPrice");
    return value!.toBigDecimal();
  }

  set approvalPrice(value: BigDecimal) {
    this.set("approvalPrice", Value.fromBigDecimal(value));
  }

  get principal(): BigDecimal {
    let value = this.get("principal");
    return value!.toBigDecimal();
  }

  set principal(value: BigDecimal) {
    this.set("principal", Value.fromBigDecimal(value));
  }

  get expectedYield(): BigDecimal {
    let value = this.get("expectedYield");
    return value!.toBigDecimal();
  }

  set expectedYield(value: BigDecimal) {
    this.set("expectedYield", Value.fromBigDecimal(value));
  }

  get duration(): BigInt {
    let value = this.get("duration");
    return value!.toBigInt();
  }

  set duration(value: BigInt) {
    this.set("duration", Value.fromBigInt(value));
  }

  get description(): string {
    let value = this.get("description");
    return value!.toString();
  }

  set description(value: string) {
    this.set("description", Value.fromString(value));
  }

  get collaterals(): Array<string> {
    let value = this.get("collaterals");
    return value!.toStringArray();
  }

  set collaterals(value: Array<string>) {
    this.set("collaterals", Value.fromStringArray(value));
  }

  get totalBorrowShares(): BigDecimal {
    let value = this.get("totalBorrowShares");
    return value!.toBigDecimal();
  }

  set totalBorrowShares(value: BigDecimal) {
    this.set("totalBorrowShares", Value.fromBigDecimal(value));
  }

  get totalBorrowAssets(): BigDecimal {
    let value = this.get("totalBorrowAssets");
    return value!.toBigDecimal();
  }

  set totalBorrowAssets(value: BigDecimal) {
    this.set("totalBorrowAssets", Value.fromBigDecimal(value));
  }

  get totalSupplyShares(): BigDecimal {
    let value = this.get("totalSupplyShares");
    return value!.toBigDecimal();
  }

  set totalSupplyShares(value: BigDecimal) {
    this.set("totalSupplyShares", Value.fromBigDecimal(value));
  }

  get totalSupplyAssets(): BigDecimal {
    let value = this.get("totalSupplyAssets");
    return value!.toBigDecimal();
  }

  set totalSupplyAssets(value: BigDecimal) {
    this.set("totalSupplyAssets", Value.fromBigDecimal(value));
  }

  get totalAvailableAssets(): BigDecimal {
    let value = this.get("totalAvailableAssets");
    return value!.toBigDecimal();
  }

  set totalAvailableAssets(value: BigDecimal) {
    this.set("totalAvailableAssets", Value.fromBigDecimal(value));
  }

  get saleAmount(): BigDecimal {
    let value = this.get("saleAmount");
    return value!.toBigDecimal();
  }

  set saleAmount(value: BigDecimal) {
    this.set("saleAmount", Value.fromBigDecimal(value));
  }

  get initPrice(): BigDecimal {
    let value = this.get("initPrice");
    return value!.toBigDecimal();
  }

  set initPrice(value: BigDecimal) {
    this.set("initPrice", Value.fromBigDecimal(value));
  }

  get promisedReturn(): BigDecimal {
    let value = this.get("promisedReturn");
    return value!.toBigDecimal();
  }

  set promisedReturn(value: BigDecimal) {
    this.set("promisedReturn", Value.fromBigDecimal(value));
  }

  get inceptionTime(): BigInt {
    let value = this.get("inceptionTime");
    return value!.toBigInt();
  }

  set inceptionTime(value: BigInt) {
    this.set("inceptionTime", Value.fromBigInt(value));
  }

  get inceptionPrice(): BigDecimal {
    let value = this.get("inceptionPrice");
    return value!.toBigDecimal();
  }

  set inceptionPrice(value: BigDecimal) {
    this.set("inceptionPrice", Value.fromBigDecimal(value));
  }

  get leverageFactor(): BigDecimal {
    let value = this.get("leverageFactor");
    return value!.toBigDecimal();
  }

  set leverageFactor(value: BigDecimal) {
    this.set("leverageFactor", Value.fromBigDecimal(value));
  }

  get managementFee(): BigDecimal {
    let value = this.get("managementFee");
    return value!.toBigDecimal();
  }

  set managementFee(value: BigDecimal) {
    this.set("managementFee", Value.fromBigDecimal(value));
  }

  get borrowAPR(): BigDecimal | null {
    let value = this.get("borrowAPR");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set borrowAPR(value: BigDecimal | null) {
    if (!value) {
      this.unset("borrowAPR");
    } else {
      this.set("borrowAPR", Value.fromBigDecimal(<BigDecimal>value));
    }
  }
}

export class PoolCollateral extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PoolCollateral entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type PoolCollateral must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("PoolCollateral", id.toString(), this);
    }
  }

  static load(id: string): PoolCollateral | null {
    return changetype<PoolCollateral | null>(store.get("PoolCollateral", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get pool(): string {
    let value = this.get("pool");
    return value!.toString();
  }

  set pool(value: string) {
    this.set("pool", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value!.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get symbol(): string {
    let value = this.get("symbol");
    return value!.toString();
  }

  set symbol(value: string) {
    this.set("symbol", Value.fromString(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    return value!.toBigInt();
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get tokenAddress(): string {
    let value = this.get("tokenAddress");
    return value!.toString();
  }

  set tokenAddress(value: string) {
    this.set("tokenAddress", Value.fromString(value));
  }

  get borrowAmount(): BigDecimal {
    let value = this.get("borrowAmount");
    return value!.toBigDecimal();
  }

  set borrowAmount(value: BigDecimal) {
    this.set("borrowAmount", Value.fromBigDecimal(value));
  }

  get maxAmount(): BigDecimal {
    let value = this.get("maxAmount");
    return value!.toBigDecimal();
  }

  set maxAmount(value: BigDecimal) {
    this.set("maxAmount", Value.fromBigDecimal(value));
  }

  get isERC20(): boolean {
    let value = this.get("isERC20");
    return value!.toBoolean();
  }

  set isERC20(value: boolean) {
    this.set("isERC20", Value.fromBoolean(value));
  }

  get totalSupplied(): BigDecimal {
    let value = this.get("totalSupplied");
    return value!.toBigDecimal();
  }

  set totalSupplied(value: BigDecimal) {
    this.set("totalSupplied", Value.fromBigDecimal(value));
  }

  get decimals(): BigInt | null {
    let value = this.get("decimals");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set decimals(value: BigInt | null) {
    if (!value) {
      this.unset("decimals");
    } else {
      this.set("decimals", Value.fromBigInt(<BigInt>value));
    }
  }

  get owner(): string {
    let value = this.get("owner");
    return value!.toString();
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }
}

export class CreditlineInstrument extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save CreditlineInstrument entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CreditlineInstrument must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CreditlineInstrument", id.toString(), this);
    }
  }

  static load(id: string): CreditlineInstrument | null {
    return changetype<CreditlineInstrument | null>(
      store.get("CreditlineInstrument", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get market(): string {
    let value = this.get("market");
    return value!.toString();
  }

  set market(value: string) {
    this.set("market", Value.fromString(value));
  }

  get vault(): string {
    let value = this.get("vault");
    return value!.toString();
  }

  set vault(value: string) {
    this.set("vault", Value.fromString(value));
  }

  get utilizer(): string {
    let value = this.get("utilizer");
    return value!.toString();
  }

  set utilizer(value: string) {
    this.set("utilizer", Value.fromString(value));
  }

  get underlyingBalance(): BigDecimal {
    let value = this.get("underlyingBalance");
    return value!.toBigDecimal();
  }

  set underlyingBalance(value: BigDecimal) {
    this.set("underlyingBalance", Value.fromBigDecimal(value));
  }

  get name(): string {
    let value = this.get("name");
    return value!.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get seniorAPR(): BigDecimal {
    let value = this.get("seniorAPR");
    return value!.toBigDecimal();
  }

  set seniorAPR(value: BigDecimal) {
    this.set("seniorAPR", Value.fromBigDecimal(value));
  }

  get exposurePercentage(): BigDecimal {
    let value = this.get("exposurePercentage");
    return value!.toBigDecimal();
  }

  set exposurePercentage(value: BigDecimal) {
    this.set("exposurePercentage", Value.fromBigDecimal(value));
  }

  get managerStake(): BigDecimal {
    let value = this.get("managerStake");
    return value!.toBigDecimal();
  }

  set managerStake(value: BigDecimal) {
    this.set("managerStake", Value.fromBigDecimal(value));
  }

  get approvalPrice(): BigDecimal {
    let value = this.get("approvalPrice");
    return value!.toBigDecimal();
  }

  set approvalPrice(value: BigDecimal) {
    this.set("approvalPrice", Value.fromBigDecimal(value));
  }

  get description(): string {
    let value = this.get("description");
    return value!.toString();
  }

  set description(value: string) {
    this.set("description", Value.fromString(value));
  }

  get principal(): BigDecimal {
    let value = this.get("principal");
    return value!.toBigDecimal();
  }

  set principal(value: BigDecimal) {
    this.set("principal", Value.fromBigDecimal(value));
  }

  get expectedYield(): BigDecimal {
    let value = this.get("expectedYield");
    return value!.toBigDecimal();
  }

  set expectedYield(value: BigDecimal) {
    this.set("expectedYield", Value.fromBigDecimal(value));
  }

  get duration(): BigInt {
    let value = this.get("duration");
    return value!.toBigInt();
  }

  set duration(value: BigInt) {
    this.set("duration", Value.fromBigInt(value));
  }

  get maturityDate(): BigInt | null {
    let value = this.get("maturityDate");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set maturityDate(value: BigInt | null) {
    if (!value) {
      this.unset("maturityDate");
    } else {
      this.set("maturityDate", Value.fromBigInt(<BigInt>value));
    }
  }

  get collateralType(): BigInt {
    let value = this.get("collateralType");
    return value!.toBigInt();
  }

  set collateralType(value: BigInt) {
    this.set("collateralType", Value.fromBigInt(value));
  }
}

export class Manager extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Manager entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Manager must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Manager", id.toString(), this);
    }
  }

  static load(id: string): Manager | null {
    return changetype<Manager | null>(store.get("Manager", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get reputationScore(): BigDecimal {
    let value = this.get("reputationScore");
    return value!.toBigDecimal();
  }

  set reputationScore(value: BigDecimal) {
    this.set("reputationScore", Value.fromBigDecimal(value));
  }

  get markets(): Array<string> | null {
    let value = this.get("markets");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set markets(value: Array<string> | null) {
    if (!value) {
      this.unset("markets");
    } else {
      this.set("markets", Value.fromStringArray(<Array<string>>value));
    }
  }
}

export class ManagerMarketPair extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ManagerMarketPair entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ManagerMarketPair must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ManagerMarketPair", id.toString(), this);
    }
  }

  static load(id: string): ManagerMarketPair | null {
    return changetype<ManagerMarketPair | null>(
      store.get("ManagerMarketPair", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get manager(): string {
    let value = this.get("manager");
    return value!.toString();
  }

  set manager(value: string) {
    this.set("manager", Value.fromString(value));
  }

  get market(): string {
    let value = this.get("market");
    return value!.toString();
  }

  set market(value: string) {
    this.set("market", Value.fromString(value));
  }

  get longZCBCollateral(): BigDecimal {
    let value = this.get("longZCBCollateral");
    return value!.toBigDecimal();
  }

  set longZCBCollateral(value: BigDecimal) {
    this.set("longZCBCollateral", Value.fromBigDecimal(value));
  }

  get shortZCBCollateral(): BigDecimal {
    let value = this.get("shortZCBCollateral");
    return value!.toBigDecimal();
  }

  set shortZCBCollateral(value: BigDecimal) {
    this.set("shortZCBCollateral", Value.fromBigDecimal(value));
  }
}

export class BondPool extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save BondPool entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type BondPool must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("BondPool", id.toString(), this);
    }
  }

  static load(id: string): BondPool | null {
    return changetype<BondPool | null>(store.get("BondPool", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get longZCB(): string {
    let value = this.get("longZCB");
    return value!.toString();
  }

  set longZCB(value: string) {
    this.set("longZCB", Value.fromString(value));
  }

  get shortZCB(): string {
    let value = this.get("shortZCB");
    return value!.toString();
  }

  set shortZCB(value: string) {
    this.set("shortZCB", Value.fromString(value));
  }

  get longZCBPrice(): BigDecimal {
    let value = this.get("longZCBPrice");
    return value!.toBigDecimal();
  }

  set longZCBPrice(value: BigDecimal) {
    this.set("longZCBPrice", Value.fromBigDecimal(value));
  }

  get a_initial(): BigDecimal {
    let value = this.get("a_initial");
    return value!.toBigDecimal();
  }

  set a_initial(value: BigDecimal) {
    this.set("a_initial", Value.fromBigDecimal(value));
  }

  get b_initial(): BigDecimal {
    let value = this.get("b_initial");
    return value!.toBigDecimal();
  }

  set b_initial(value: BigDecimal) {
    this.set("b_initial", Value.fromBigDecimal(value));
  }

  get b(): BigDecimal {
    let value = this.get("b");
    return value!.toBigDecimal();
  }

  set b(value: BigDecimal) {
    this.set("b", Value.fromBigDecimal(value));
  }

  get discountCap(): BigDecimal {
    let value = this.get("discountCap");
    return value!.toBigDecimal();
  }

  set discountCap(value: BigDecimal) {
    this.set("discountCap", Value.fromBigDecimal(value));
  }

  get discountedReserved(): BigDecimal {
    let value = this.get("discountedReserved");
    return value!.toBigDecimal();
  }

  set discountedReserved(value: BigDecimal) {
    this.set("discountedReserved", Value.fromBigDecimal(value));
  }
}

export class ZCBToken extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ZCBToken entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ZCBToken must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ZCBToken", id.toString(), this);
    }
  }

  static load(id: string): ZCBToken | null {
    return changetype<ZCBToken | null>(store.get("ZCBToken", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get marketId(): string {
    let value = this.get("marketId");
    return value!.toString();
  }

  set marketId(value: string) {
    this.set("marketId", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value!.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get symbol(): string {
    let value = this.get("symbol");
    return value!.toString();
  }

  set symbol(value: string) {
    this.set("symbol", Value.fromString(value));
  }

  get decimals(): BigInt {
    let value = this.get("decimals");
    return value!.toBigInt();
  }

  set decimals(value: BigInt) {
    this.set("decimals", Value.fromBigInt(value));
  }

  get totalSupply(): BigDecimal {
    let value = this.get("totalSupply");
    return value!.toBigDecimal();
  }

  set totalSupply(value: BigDecimal) {
    this.set("totalSupply", Value.fromBigDecimal(value));
  }
}

export class Token extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Token entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Token must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Token", id.toString(), this);
    }
  }

  static load(id: string): Token | null {
    return changetype<Token | null>(store.get("Token", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value!.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get symbol(): string {
    let value = this.get("symbol");
    return value!.toString();
  }

  set symbol(value: string) {
    this.set("symbol", Value.fromString(value));
  }

  get decimals(): BigInt {
    let value = this.get("decimals");
    return value!.toBigInt();
  }

  set decimals(value: BigInt) {
    this.set("decimals", Value.fromBigInt(value));
  }

  get totalSupply(): BigDecimal {
    let value = this.get("totalSupply");
    return value!.toBigDecimal();
  }

  set totalSupply(value: BigDecimal) {
    this.set("totalSupply", Value.fromBigDecimal(value));
  }
}
